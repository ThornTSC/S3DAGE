define u16 tubespring.strength = s16[A0 + 0x30]

//# address-hook(0x029590) end(0x0295bc)
function void TubeSpring.BaseUpdate()
{
	if (objA0.base_state == 0)
		TubeSpring.Init()
	else // if (objA0.base_state == 2)
		TubeSpring.Main()

	D0.u16 = (objA0.position.x.u16 & 0xff80) - level.despawn_position.x
	if (D0.u16 <= 0x0280)
	{
		DrawObject()
	}
	else
	{
		if (objA0.respawn_entry)
		{
			A2 = 0xffff0000 + objA0.respawn_entry
			u8[A2] &= ~0x80
		}
		UnloadObject()
	}
	DrawOrUnloadObject()
}


function void TubeSpring.Init()
{
	objA0.base_state += 0x02
	objA0.mapping_offset = s2_mappings_address + 0x0800
	objA0.sprite_attributes = 0x03e0
	objA0.render_flags |= 0x04
	objA0.box_size.x = 0x10
	objA0.box_size.y = 0x18
	objA0.sprite_priority = 0x0080
	D0.u8 = objA0.subtype2c
	D0.u16 &= 0x02
	tubespring.strength = (D0.u16) ? -0x0a80 : -0x1000
	TubeSpring.Main()
}

function void TubeSpring.Main()
{
	if (objA0.animation.sprite != 0x01)
	{
		D1.u16 = 0x1b
		D2.u16 = 0x08
		D3.u16 = 0x10
		D4.u16 = objA0.position.x.u16
		A1 = 0xffffb000
		D6 = 0x03
		push(D4)
		push(D3)
		push(D2)
		push(D1)
		fn01dc74()					// SolidObject_Always_SingleCharacter
		if (objA0.flags2a & 0x08)
		{
			fn0296c2()
		}
		D1 = pop()
		D2 = pop()
		D3 = pop()
		D4 = pop()
		A1 = 0xffffb04a
		D6 = 0x04
		fn01dc74()					// SolidObject_Always_SingleCharacter
		if (objA0.flags2a & 0x10)
		{
			fn0296c2()
		}
	}
	// loc_29648
	D4.u16 = objA0.position.x.u16
	D5.u16 = D4.u16
	D4.u16 -= 0x10
	D5.u16 += 0x10
	D2.u16 = objA0.position.y.u16
	D3.u16 = D2.u16 + 0x30
	D0.u16 = u16[0xffffb000 + 0x10]		// main character x position
	if (D0.u16 >= D4.u16)
	{
		if (D0.u16 < D5.u16)
		{
			D0.u16 = u16[0xffffb000 + 0x14]		// main character y position
			if (D0.u16 >= D2.u16)
			{
				if (D0.u16 < D3.u16)
				{
					if (objA0.state.former != 0x02)
					{
						objA0.state = 0x02
					}
				}
			}
		}
	}
	D0.u16 = u16[0xffffb04a + 0x10]		// sidekick x position
	if (D0.u16 >= D4.u16)
	{
		if (D0.u16 < D5.u16)
		{
			D0.u16 = u16[0xffffb04a + 0x14]		// sidekick y position
			if (D0.u16 >= D2.u16)
			{
				if (D0.u16 < D3.u16)
				{
					if (tails.ai_routine != 0x04)
					{
						if (objA0.state.former != 0x03)
						{
							objA0.state = 0x03
						}
					}
				}
			}
		}
	}
	System.loadExternalRawData("cpz_tubespring_animation", s2_decompression_buffer_2 + 0x14 + 0x0c + 0x12 + 0x06)
	A1 = s2_decompression_buffer_2 + 0x14 + 0x0c + 0x12 + 0x06
	Object.AnimationUpdate()
}


function void fn0296c2()
{
	objA0.state.both = 0x0100
	objA1.position.y.u16 += 0x04
	objA1.velocity.y = tubespring.strength
	objA1.flags2a |= 0x02
	objA1.flags2a &= ~0x08
	objA1.state = 0x10
	objA1.base_state = 0x02
	D0.u8 = objA0.subtype2c
	if (D0.s8 < 0)
	{
		objA1.velocity.x = 0
	}
	if (D0 & 0x00000001)
	{
		objA1.groundspeed = 0x01
		u8[A1 + 0x27] = 0x01		// flip_angle or char.rotation.x in A1. Same offset in Sonic 2 and S3&K.
		objA1.state = 0
		u8[A1 + 0x30] = 0		// flips_remaining
		u8[A1 + 0x31] = 0x04	// flip_speed
		if ((D0 & 0x00000002) == 0)
		{
			u8[A1 + 0x30] = 0x01
		}
		if (objA1.flags2a & 0x01)
		{
			s8[A1 + 0x27] = -s8[A1 + 0x27]		// flip_angle or char.rotation.x in A1. Same offset in Sonic 2 and S3&K.
			objA1.groundspeed = -objA1.groundspeed
		}
	}
	D0.u8 &= 0x0c
	if (D0.u8 == 0x04)
	{
		u8[A1 + 0x46] = 0x0c	// top_solid_bit
		u8[A1 + 0x47] = 0x0d	// lrb_solid_bit
	}
	if (D0.u8 == 0x08)
	{
		u8[A1 + 0x46] = 0x0e	// top_solid_bit
		u8[A1 + 0x47] = 0x0f	// lrb_solid_bit
	}
	playSound(SFX_SPRING)
}
