//# address-hook(0x027758) end(0x027772)
function void LevelTilesAnimation()
{
	if (unlock_act)
		S2.LevelTilesAnimation()
	else
		base.LevelTilesAnimation()
}

function void S2.LevelTilesAnimation()
{
	A2 = s2_levelanimation_address	// should A2 contain the address of the animation scripts for a level?
	System.loadExternalRawData("ehz_animscripts", A2)
	System.loadExternalRawData("ehz_animtiles", A2 + 0x64)	// 0x64 is the length of the animation script file
	A3 = 0xfffff7f0			// Anim_Counters in S2 and S3 alike

	// new code to kick off animations within one frame
	if (u8[0xfffff7f0] == 0)
	{
		u32[0xfffff7f0] = 0x01000100
		u32[0xfffff7f4] = 0x01000100
		u32[0xfffff7f8] = 0x01000100
		u32[0xfffff7fc] = 0x01000100
	}

	D6.u16 = u16[(A2+=2)-2]	// get number of animation scripts to use in the level // A2 is iterated by 2 here, which affects animation script addresses
	while (true)
	{
		--u8[A3]
		if (u8[A3] <= 0)	// carryFlag()
		{
			D0 = u8[A3 + 1]
			if (D0.u8 >= u8[A2 + 0x06])
			{
				D0 = 0
				u8[A3 + 0x01] = D0.u8
			}
			++u8[A3 + 0x01]
			u8[A3] = u8[A2]
			if (s8[A3] < 0)
			{
				D0.u16 *= 2
				u8[A3] = u8[A2 + D0.s16 + 0x09]
			}
			D0.u8 = u8[A2 + D0.s16 + 0x08]
			D0.u16 <<= 5
			D2.u16 = u16[A2 + 0x04]
			D1 = s2_levelanimation_address + u16[A2 + 2] + D0	// D1 = u32[A2] & 0xffffff + D0
			D3 = u8[A2 + 0x07]
			D3.u16 <<= 4
		//	debugLog(stringformat("D1 = %x, D2 = %x, D3 = %x, D6 = %x", D1, D2, D3, D6))
			UpdateSpritePattern()	// call 0x00144e		// QueueDMATransfer in S2, Add_to_DMA_Queue in S3 using D1, D2, and D3. There is an equivalent AIR function already.
		}
		D0.u8 = u8[A2 + 0x06]
		if (s8[A2] < 0)
		{
			D0.u8 *= 2
		}
		++D0.u8
		D0.u16 &= 0xfe
		A2 = A2 + D0.s16 + 0x08
		A3 += 0x02
		--D6.s16
		if (D6.s16 < 0)
			break
	}
	return
}