// objA5: Floor/Ceiling Spiny

//# address-hook(0x038aea)
function void Spiny.Horizontal.BaseUpdate()
{
	if (objA0.base_state == 0)
		Spiny.Horizontal.Init()
	else if (objA0.base_state == 2)
		Spiny.Horizontal.Main()
	else // if (objA0.base_state == 4)
		Spiny.Horizontal.PrepShot()
}


function void Spiny.Horizontal.Init()
{
	// call 0x0365f4	// LoadSubObject. We should set these values directly.
	// This function does not actually flow into the Main function, and the base state for that is set in LoadSubObject.
	objA0.mapping_offset = s2_mappings_address + 0x24 + 0x0a + 0x4c + 0x64 + 0x50 + 0x10 + 0x18 + 0x0a + 0x4c + 0x20 + 0x50
	objA0.sprite_attributes = 0x252d
	objA0.render_flags = 0x04
	objA0.sprite_priority = 0x0200
	objA0.box_size.x = 0x18
	objA0.box_size.y = 0x0c
	objA0.collision_attributes = 0x0b
	objA0.base_state += 2

	objA0.velocity.x = -0x0040
	u16[A0 + 0x30] = 0x80
	// This function does not flow directly into .Main()
}


function void Spiny.Horizontal.Main()
{
	if (u8[A0 + 0x31] != 0)
	{
		--u8[A0 + 0x31]
		fn038b2c()
		return
	}
	// loc_38B1E
	CheckDistanceToPlayers()		// Obj_GetOrientationToPlayer
	D2.u16 += 0x60
	if (D2.u16 >= 0xc0)
	{
		fn038b2c()
		return
	}
	// loc_38B4E
	objA0.base_state += 0x02
	u8[A0 + 0x31] = 0x28
	objA0.animation.sprite = 0x02
	Enemy.DrawOrUnload()
}


function void fn038b2c()
{
	// loc_38B2C
	--u8[A0 + 0x30]
	if (u8[A0 + 0x30] == 0)
	{
		u16[A0 + 0x30] = 0x80
		objA0.velocity.x = -objA0.velocity.x
	}
	// loc_38B3C
	UpdateMovementStraightSimple()

	System.loadExternalRawData("spiny_animation", s2_decompression_buffer_2 + 0x14 + 0x0c)	// 0x12 bytes containing three scripts: horizontal Spiny, vertical Spiny, projectile
	A1 = s2_decompression_buffer_2 + 0x14 + 0x0c	// first of three Spiny animation scripts, each 0x06 long
	Object.AnimationUpdate()
	Enemy.DrawOrUnload()
}


function void Spiny.Horizontal.PrepShot()
{
	--u8[A0 + 0x31]
	if (s8[A0 + 0x31] >= 0)
	{
		if (u8[A0 + 0x31] == 0x14 && (objA0.render_flags & render_flag.VISIBLE))	// visibility check added to avoid offscreen shots
		{
			Spiny.Horizontal.Shoot()
		}
		Enemy.DrawOrUnload()
		return
	}
	objA0.base_state -= 0x02
	u8[A0 + 0x31] = 0x40
	Enemy.DrawOrUnload()
}

// objA6: Wall Spiny

//# address-hook(0x038b86)
function void Spiny.Vertical.BaseUpdate()
{
	if (objA0.base_state == 0)
		Spiny.Vertical.Init()
	else if (objA0.base_state == 2)
		Spiny.Vertical.Main()
	else // if (objA0.base_state == 4)
		Spiny.Vertical.PrepShot()
}


function void Spiny.Vertical.Init()
{
	// call 0x0365f4	// LoadSubObject. We should set these values directly.
	// This function does not actually flow into the Main function, and the base state for that is set in LoadSubObject.
	objA0.mapping_offset = s2_mappings_address + 0x24 + 0x0a + 0x4c + 0x64 + 0x50 + 0x10 + 0x18 + 0x0a + 0x4c + 0x20 + 0x50
	objA0.sprite_attributes = 0x252d
	objA0.render_flags = 0x04
	objA0.sprite_priority = 0x0200
	objA0.box_size.x = 0x0c
	objA0.box_size.y = 0x18
	objA0.collision_attributes = 0x0b
	objA0.base_state += 2
	
	objA0.velocity.y = -0x0040
	u16[A0 + 0x30] = 0x80
	// This function does not flow directly into .Main()
}


function void Spiny.Vertical.Main()
{
	if (u8[A0 + 0x31] != 0)
	{
		--u8[A0 + 0x31]
		fn038bc8()
		return
	}
	CheckDistanceToPlayers()		// Obj_GetOrientationToPlayer
	D2.u16 += 0x60
	if (D2.u16 >= 0xc0)
	{
		fn038bc8()
		return
	}
	objA0.base_state += 0x02
	u8[A0 + 0x31] = 0x28
	objA0.animation.sprite = 0x05
	Enemy.DrawOrUnload()
}


function void fn038bc8()
{
	// loc_38bc8
	--u8[A0 + 0x30]
	if (u8[A0 + 0x30] == 0)
	{
		u16[A0 + 0x30] = 0x80
		objA0.velocity.y = -objA0.velocity.y
	}
	UpdateMovementStraightSimple()

	System.loadExternalRawData("spiny_animation", s2_decompression_buffer_2 + 0x14 + 0x0c)	// 0x12 bytes containing three scripts: horizontal Spiny, vertical Spiny, projectile
	A1 = s2_decompression_buffer_2 + 0x14 + 0x0c + 0x06		// second of three Spiny animation scripts, each 0x06 long
	Object.AnimationUpdate()
	Enemy.DrawOrUnload()
}

function void Spiny.Vertical.PrepShot()
{
	--u8[A0 + 0x31]
	if (s8[A0 + 0x31] >= 0)
	{
		if (u8[A0 + 0x31] == 0x14 && (objA0.render_flags & render_flag.VISIBLE))	// visibility check added to avoid offscreen shots
		{
			Spiny.Vertical.Shoot()
		}
		Enemy.DrawOrUnload()
		return
	}
	objA0.base_state -= 0x02
	u8[A0 + 0x31] = 0x40
	Enemy.DrawOrUnload()
	return
}


function void Spiny.Horizontal.Shoot()
{
	if (allocDynamicObjectStd())
	{
		objA1.update_address = 0x037d24				// load obj98 in S2
		objA1.animation.sprite = 0x06
		objA1.subtype2c = 0x34
		objA1.position.x.u16 = objA0.position.x.u16
		objA1.position.y.u16 = objA0.position.y.u16
		objA1.velocity.y = -0x0300
		D1.u16 = 0x0100
		A2 = 0xffffb000
		D0.u16 = objA0.position.x.u16
		if (D0.u16 >= u16[A2 + 0x10])	// compare object and character x positions
		{
			D1.s16 = -D1.s16
		}
		objA1.velocity.x = D1.u16
//		A2 = 0x037742			// This line and the next can be used to set the movement routine a projectile uses.
		u32[A1 + 0x30] = 0xa5	// It's usually at objoff_2A in Sonic 2.
	}
}


function void Spiny.Vertical.Shoot()
{
	if (allocDynamicObjectStd())
	{
		objA1.update_address = 0x037d24				// load obj98 in S2
		objA1.animation.sprite = 0x06
		objA1.subtype2c = 0x34
		objA1.position.x.u16 = objA0.position.x.u16
		objA1.position.y.u16 = objA0.position.y.u16
		D1.u16 = 0x0300
		if (objA0.render_flags & 0x01)
		{
			D1.s16 = -D1.s16
		}
		objA1.velocity.x = D1.u16
//		A2 = 0x037742			// This line and the next can be used to set the movement routine a projectile uses.
		u32[A1 + 0x30] = 0xa5	// It's usually at objoff_2A in Sonic 2.
	}
}
