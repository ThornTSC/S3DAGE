// Do not load post-title card patterns in unlockable acts;
// we take advantage of the image title cards to overwrite them during the title card itself.
// Function taken from maingame\hud\titlecard.lemon
//# address-hook(0x02f77c) end(0x02f7bc)
function void fn02f77c()
{
	if (!unlock_act)
		base.fn02f77c()
	else
	{
		u32 backupA0 = A0
		D0.u16 = 0x12
		RequestLoadingPatterns()
		A0 = backupA0
	}
}

function void RequestLoadingPatterns()	// PLC_0B is the format for PLC headers in sonic3k.asm from the GitHub disassembly
{
	if (!unlock_act) // && !(D0.u16 == 0x01 || D0.u16 == 0x02 || D0.u16 == 0x05 || D0.u16 == 0x07 || D0.u16 == 0x12))
	{
		base.RequestLoadingPatterns()
		return
	}
	if (unlock_act != 3 && (D0.u16 == 0x01 || D0.u16 == 0x05 || D0.u16 == 0x07 || D0.u16 == 0x52))	// PLC_01 (Sonic), 05 (Knuckles), or 07/52 (Tails) character life icons, monitors, RING HUD, enemy points, star post
	{
		// Life icon art needed. Goes to 0xfa80.

		System.loadExternalRawData("s2_numbers_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x9580)

		System.loadExternalRawData("s2_ring_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0xd780)

		System.loadExternalRawData("s2_hud_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0xd940)
	}

	if (D0.u16 != 0x12)		// MGZ1 Primary, now unlockable acts
		return

	if (unlock_act == 1)	// EHZ
	{
		// Primary
		System.loadExternalRawData("ehz_waterfall_mappings", s2_mappings_address + 0x0186)
		System.loadExternalRawData("ehz_waterfall_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x73c0)

		System.loadExternalRawData("ehz_bridge_mappings", s2_mappings_address + 0x002c)
		System.loadExternalRawData("ehz_bridge_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x76c0)
		
		System.loadExternalRawData("buzzer_fireball_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x77c0)
		
		System.loadExternalRawData("buzzer_mappings", s2_mappings_address + 0x0336)
		System.loadExternalRawData("buzzer_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x7a40)
		
		System.loadExternalRawData("coconuts_mappings", s2_mappings_address + 0x02d2)
		System.loadExternalRawData("coconuts_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x7dc0)

		System.loadExternalRawData("masher_mappings", s2_mappings_address)
		System.loadExternalRawData("masher_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8280)

		// Secondary
		System.loadExternalRawData("s2_spikes_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8680)

		System.loadExternalRawData("s2_spring_mappings", 0x221dea)		// formerly s2_mappings_address + 0x0040
		System.loadExternalRawData("s2_diagonalspring_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8780)

		System.loadExternalRawData("s2_upwardspring_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8b80)

		System.loadExternalRawData("s2_sidespring_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8e00)

		// Other
		System.loadExternalRawData("s2_invin_stars_mappings", s2_mappings_address + 0x041a)

		System.loadExternalRawData("s2_starpost_mappings", s2_mappings_address + 0x04c6)	// we'll use the Sonic 3 dust recolored for now, as the characters are from Sonic 3
		System.loadExternalRawData("s2_starpost_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8f80)

		System.loadExternalRawData("s2_badnikpoints_mappings", s2_mappings_address + 0x046e)
		System.loadExternalRawData("s2_badnikpoints_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0xbc80)

		// Animation scripts for objects. These must be handled after all other art if we intend to use the same address as above.
		System.loadExternalRawData("masher_animation", s2_decompression_buffer_2)
		System.loadExternalRawData("buzzer_animation", s2_decompression_buffer_2 + 0x20)
	}

	else if (unlock_act == 2)	// CPZ
	{
		// Primary
		System.loadExternalRawData("cpz_pillar_mappings", s2_mappings_address + 0x24 + 0x0a + 0x4c)	// 0x64 bytes
		System.loadExternalRawData("cpz_pillar_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x6e60)
		
		System.loadExternalRawData("cpz_door_mappings", s2_mappings_address + 0x24 + 0x0a)	// 0x4c bytes
		System.loadExternalRawData("cpz_door_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x7280)

		System.loadExternalRawData("cpz_booster_mappings", s2_mappings_address)	// 0x24 bytes
		System.loadExternalRawData("cpz_booster_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x7380)

		System.loadExternalRawData("cpz_platform_mappings", s2_mappings_address + 0x24 + 0x0a + 0x4c + 0x64 + 0x50 + 0x10 + 0x18 + 0x0a)	// 0x4c bytes
		System.loadExternalRawData("cpz_platform_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x7400)

		System.loadExternalRawData("cpz_yellowplat_mappings", s2_mappings_address + 0x24 + 0x0a + 0x4c + 0x64)	// 0x50 bytes
		System.loadExternalRawData("cpz_yellowplat_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x7600)

		System.loadExternalRawData("cpz_tubespring_mappings", s2_mappings_address + 0x0800)	// 0x44 bytes
		System.loadExternalRawData("cpz_tubespring_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x7c00)

		System.loadExternalRawData("cpz_watersurface_mappings", s2_mappings_address + 0x1000)	// 0xba bytes
		System.loadExternalRawData("cpz_watersurface_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8000)

		System.loadExternalRawData("s2_bubbles_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0xa9a0)	// not the original art or location from Sonic 2! Using S3&K additional bubbles with Sonic 2 colors.

		System.loadExternalRawData("cpz_movingblock_mappings", s2_mappings_address + 0x24 + 0x0a + 0x4c + 0x64 + 0x50)	// 0x10 bytes
		System.loadExternalRawData("cpz_movingblock_subdata", s2_mappings_address + 0x24 + 0x0a + 0x4c + 0x64 + 0x50 + 0x10)	// 0x18 bytes for subdata
		System.loadExternalRawData("cpz_rotatingblock_mappings", s2_mappings_address + 0x24 + 0x0a + 0x4c + 0x64 + 0x50 + 0x10 + 0x18)	// 0x0a bytes
		System.loadExternalRawData("cpz_movingblock_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8300)

		System.loadExternalRawData("cpz_tubeblock_mappings", s2_mappings_address + 0x24 + 0x0a + 0x4c + 0x64 + 0x50 + 0x10 + 0x18 + 0x0a + 0x4c + 0x20 + 0x50 + 0xbc + 0xf6)	// 0x1c bytes
		System.loadExternalRawData("cpz_tubeblock_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8600)

		// Secondary
		System.loadExternalRawData("s2_spikes_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8680)

		System.loadExternalRawData("cpz_orb_mappings", s2_mappings_address + 0x24)	// 0x09 bytes, rounded up to 0x0a for even value
		System.loadExternalRawData("cpz_orb_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8780)

		System.loadExternalRawData("springboard_mappings", s2_mappings_address + 0x24 + 0x0a + 0x4c + 0x64 + 0x50 + 0x10 + 0x18 + 0x0a + 0x4c)	// 0x20 bytes
		System.loadExternalRawData("springboard_slopedata", s2_mappings_address + 0x24 + 0x0a + 0x4c + 0x64 + 0x50 + 0x10 + 0x18 + 0x0a + 0x4c + 0x20)	// 0x50 bytes
		System.loadExternalRawData("springboard_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8800)

		System.loadExternalRawData("s2_spring_mappings", 0x221dea)		// formerly s2_mappings_address + 0x0040
	//	System.loadExternalRawData("s2_diagonalspring_art_nem", s2_decompression_buffer_2)	// not used in CPZ
	//	Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8780)							// not used in CPZ

		System.loadExternalRawData("s2_upwardspring_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8b80)

		System.loadExternalRawData("s2_sidespring_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8e00)

		System.loadExternalRawData("grabber_mappings", s2_mappings_address + 0x24 + 0x0a + 0x4c + 0x64 + 0x50 + 0x10 + 0x18 + 0x0a + 0x4c + 0x20 + 0x50 + 0xbc) // 0xf6 bytes
		System.loadExternalRawData("grabber_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0xa000)

		System.loadExternalRawData("spiny_mappings", s2_mappings_address + 0x24 + 0x0a + 0x4c + 0x64 + 0x50 + 0x10 + 0x18 + 0x0a + 0x4c + 0x20 + 0x50)	// 0xbc bytes
		System.loadExternalRawData("spiny_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0xa5a0)

		System.loadExternalRawData("cpz_floatingblocksmall_mappings", s2_mappings_address + 0x2000)		// 0x40 bytes
		System.loadExternalRawData("cpz_floatingblock_mappings", s2_mappings_address + 0x2000 + 0x40)	// 0x88 bytes

		// Other
		System.loadExternalRawData("s2_invin_stars_mappings", s2_mappings_address + 0x041a)

		System.loadExternalRawData("s2_starpost_mappings", s2_mappings_address + 0x04c6)	// we'll use the Sonic 3 dust recolored for now, as the characters are from Sonic 3
		System.loadExternalRawData("s2_starpost_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0x8f80)

		System.loadExternalRawData("s2_badnikpoints_mappings", s2_mappings_address + 0x046e)
		System.loadExternalRawData("s2_badnikpoints_art_nem", s2_decompression_buffer_2)
		Nemesis.loadDataToVRAM(s2_decompression_buffer_2, 0xbc80)

		System.loadExternalRawData("obj1E_a", 0x880980)
		System.loadExternalRawData("obj1E_b", 0x880e88)

		// Animation scripts for objects. These must be handled after all other art if we intend to use the same address as above.
		System.loadExternalRawData("cpz_yellowplat_animation", s2_decompression_buffer_2)	// 0x14 bytes
		System.loadExternalRawData("springboard_animation", s2_decompression_buffer_2 + 0x14)	// 0x0c bytes
		System.loadExternalRawData("spiny_animation", s2_decompression_buffer_2 + 0x14 + 0x0c)	// 0x12 bytes containing three scripts: horizontal Spiny, vertical Spiny, projectile
		System.loadExternalRawData("grabber_animation", s2_decompression_buffer_2 + 0x14 + 0x0c + 0x12)	// 0x06 bytes
		System.loadExternalRawData("cpz_tubespring_animation", s2_decompression_buffer_2 + 0x14 + 0x0c + 0x12 + 0x06)	// 0x18 bytes
	}
	else if (unlock_act == 3)
	{
		// Button
		Nemesis.loadDataToVRAM(0x190ac4, 0x8ac0)

		// Spikes and springs
		Nemesis.loadDataToVRAM(0x1927fe, 0x9280)
	}
}