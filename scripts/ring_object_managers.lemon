global u16 rings.state_table_size = 1024	// The first word of ring data is always 00 00, so this is one more than the number of rings.
											// The default value is 512 (0x200).
global u16 bonus.rings.state_table_size = 512

// Move the ring state table from 0xffffe700 to shared memory address 0x820000, freeing the space for the object respawn table.
// Adjust all pointers that used 0xffff0000 as a base.
// The following functions are taken from maingame\static_rings.lemon.
//# address-hook(0x00eb1a) end(0x00eb84)
function void fn00eb1a()
{
	if (!global.in_extra_stage || (specialstages_knuckles && unlock_act && isMainCharacter(CHARACTER_KNUCKLES)))	// Don't clear when returning from special/bonus stage unless we're in Knux Sonic 2 hard mode
	{
		zeroMemory(0x820000, 2 * rings.state_table_size)	// usually 0x400
	}

	zeroMemory(0xffffef80, 0x80)

	if (global.zone == 0x14)
	{
		zeroMemory(0xffff8600,  2 * bonus.rings.state_table_size)	// usually 0x400
	}

	u16 offset = global.zone * 8 + global.act * 4
	A1 = u32[0x1e3e58 + offset]
#if STANDALONE
	LevelRingsTableBuilder.buildRings()
#endif
	rings.around.first = A1

	// Count static rings
	A1 += 4
	D5 = 0
	while (D5 < rings.state_table_size)		// this line is a limiter on the ring table size and is typically hardcoded to a size of 0x200
	{
		if (u16[(A1+=4)-4] & 0x8000)
			break

		++D5.u16
	}

	level.total_rings = D5.u16
	u16[0xffffff06] = 0
}

//# address-hook(0x00e8be) end(0x00e940)
function void InitStaticRings()
{
	rings.update_routine += 2
	fn00eb1a()

	if (global.zone == 0x14)	// Glowing Spheres bonus stage
	{
		rings.update_routine += 2

		A1 = rings.around.first
		A2 = 0xffff8600
		D4.u16 = camera.position.y.u16 - 8
		if (D4.s16 <= 0)
			D1 = 1

		while (D4.u16 > u16[A1 + 2])
		{
			A1 += 4
			A2 += 2
		}
		rings.around.first = A1
		rings.around.first.state = A2.u16
		D4.u16 += 0xf0

		while (D4.u16 > u16[A1 + 2])
		{
			A1 += 4
		}
		rings.around.last = A1
	}
	else
	{
		A1 = rings.around.first
		A2 = 0x820000
		D4.u16 = camera.position.x.u16 - 8
		if (D4.s16 <= 0)
			D4 = 1

		while (D4.u16 > u16[A1])
		{
			A1 += 4
			A2 += 2
		}
		rings.around.first = A1
		rings.around.first.state = A2.u16
		D4.u16 += 0x150

		while (D4.u16 > u16[A1])
		{
			A1 += 4
		}
		rings.around.last = A1
	}
}

/# address-hook(0x00e942) end(0x00e992)
function void UpdateListOfRingsAround_Default()
{
	UpdateStaticRingsAnimation()

	s16 borderLeft = 8		// Use 8 pixels of border for the ring radius, so rings don't pop in
	s16 borderRight = 8
#if STANDALONE
	// We can extend that borders a little further, to avoid rings not getting collected when the player outruns the camera
	if (u16[0xffffb010] < camera.position.x.u16 + 0x20 && !original_mode)
		borderLeft += 0x20
	if (u16[0xffffb010] >= camera.position.x.u16 + getScreenWidth() - 0x20 && !original_mode)
		borderRight += 0x20
#endif

	A1 = rings.around.first
	A2 = 0x820000 + rings.around.first.state
	if (global.zone == 0x14)
		A2 = 0xffff0000 + rings.around.first.state
	D4.u16 = max(s16(camera.position.x.u16) - borderLeft, 1)

	while (D4.u16 > u16[A1])
	{
		A1 += 4
		A2 += 2
	}
	while (D4.u16 <= u16[A1 - 4])
	{
		A1 -= 4
		A2 -= 2
	}

	rings.around.first = A1
	rings.around.first.state = A2
	A2 = rings.around.last
	D4.u16 += getScreenWidth() + borderLeft + borderRight

	while (D4.u16 > u16[A2])
	{
		A2 += 4
	}
	while (D4.u16 <= u16[A2 - 4])
	{
		A2 -= 4
	}
	rings.around.last = A2
}

//# address-hook(0x00e9ca) end(0x00ea1e)
function void UpdateListOfRingsAround_VerticalLayout()
{
	// This function is used e.g. in Glowing Spheres bonus stage

	UpdateStaticRingsAnimation()

	A1 = rings.around.first
	A2 = 0x820000 + rings.around.first.state
	if (global.zone == 0x14)
		A2 = 0xffff0000 + rings.around.first.state
	D4.u16 = max(s16(camera.position.y.u16) - 8, 1)

	while (D4.u16 > u16[A1 + 2])
	{
		A1 += 4
		A2 += 2
	}
	while (D4.u16 <= u16[A1 - 2])
	{
		A1 -= 4
		A2 -= 2
	}

	rings.around.first = A1
	rings.around.first.state = A2.u16
	A2 = rings.around.last
	D4.u16 += getScreenHeight() + 16		// Add 2x border of 8 pixels for the ring radius

	while (D4.u16 > u16[A2 + 2])
	{
		A2 += 4
	}
	while (D4.u16 <= u16[A2 - 2])
	{
		A2 -= 4
	}
	rings.around.last = A2
}

//# address-hook(0x00eb86) end(0x00ebec)
function void RenderStaticRings()
{
	if (global.game_mode == 0x2c || global.game_mode == 0x4c)
		return
		
	A0 = rings.around.first
	u32 numRings = (rings.around.last - rings.around.first) / 4
	if (numRings != 0)
	{
		A4 = 0x820000 + rings.around.first.state
		if (global.zone == 0x14)
			A4 = 0xffff0000 + rings.around.first.state
		A1 = 0x00ebee
		D5.u16 = 0xf0
		u16 camera_x = u16[A3]		// Usually camera.foreground.x
		u16 camera_y = u16[A3+4]	// Usually camera.foreground.y

		while (numRings > 0)
		{
			u16 ringAnimationState = u16[A4]
			if (ringAnimationState != 0xffff)
			{
				D1.u16 = (u16[A0+2] - camera_y + 8) & level.height.bitmask
				if (D1.u16 < D5.u16)
				{
					D1.u16 += 0x78
					D0.u16 = u16[A0] - camera_x + 0x80

					u8 animFrame = ringAnimationState & 0xff
					if (animFrame == 0)
					{
						// For non-collected rings, use rotating animation
						animFrame = static_rings.animframe
					}
					u32 src = A1 + animFrame * 8

					u16 px = u16[src + 6] + D0.u16
					u16 py = u16[src + 0] + D1.u16
					u8 size = u8[src + 3]
					u16 index = u16[src + 4]

				#if STANDALONE
					if ((ringAnimationState & 0xff) == 0)
					{
						// Custom smoother ring animations
						animFrame = ((static_rings.animframe * 8 + 7 - static_rings.animtimer) / 4) % 8
						if (original_mode)
							animFrame &= 0xfe	// remove the last bit to only draw original game frames in Original Mode
						u64 key = stringformat("ring_0%d", animFrame)
						if (unlock_act)
							key = stringformat("s2_ring_0%d", animFrame)
						u16 x = D0.u16 - 0x80
						u16 y = D1.u16 - 0x80
						Renderer.drawCustomSprite(key, x, y, 0x00, 0, 0xa000)
					}
					else	// ring is being collected and sparkling
					{
						Renderer.drawVdpSprite(px - 0x80, py - 0x80, size, index, 0xc000)
					}
				#endif

					u16[A6 + 0] = py
					 u8[A6 + 2] = size
					u16[A6 + 4] = index
					u16[A6 + 6] = px
					A6 += 8
					--D7.u16
				}
			}
			A4 += 2
			A0 += 4
			--numRings
		}
	}
}

//# address-hook(0x00e994) end(0x00e9c8)
function void UpdateStaticRingsAnimation()
{
	u16 numRings = u16[0xffffef80]
	u32 ringPointer = 0xffffef82
	while (numRings > 0)
	{
		if (u16[ringPointer] != 0)
		{
			A1 = 0x820000 + u16[ringPointer]
			if (global.zone == 0x14)
				A1 = 0xffff0000 + u16[ringPointer]
			--u8[A1]
			if (u8[A1] == 0)
			{
				u8[A1] = 6
				++u8[A1+1]
				if (u8[A1+1] == 8)
				{
					u16[A1] = 0xffff
					u16[ringPointer] = 0
					--u16[0xffffef80]
				}
			}
			--numRings
		}
		ringPointer += 2
	}
}





// When a ring is collected, make sure the pointer to start the animation aims at the new location in shared memory.
// Function taken from maingame\character.lemon
//# address-hook(0x00ea20) end(0x00eae4)
//# translated(0x00eaf0) end(0x00eb18)
function void SonicUpdateRingCollection()
{
	// Shortly after getting hit, you can't collect rings
	if (char.invuln.countdown >= 90)
		return

	u16 box.pos.x
	u16 box.pos.y
	u16 box.size.x
	u16 box.size.y

	if (char.bonus_effect & char.bonus.SHIELD_LIGHTNING)
	{
		box.pos.x = char.position.x.u16 - 0x40
		box.pos.y = char.position.y.u16 - 0x40
		box.size.x = 0x80
		box.size.y = 0x80
	}
	else
	{
		box.size.y = char.hitbox_extends.y - 0x03
		box.pos.x = char.position.x.u16 - 0x08
		box.pos.y = char.position.y.u16 - box.size.y
		box.size.x = 0x10
		box.size.y *= 2
	}

	// Cycle through list of all rings with x-position in screen area
	A1 = rings.around.first
	A2 = rings.around.last
	A4 = 0x820000 + rings.around.first.state
	if (global.zone == 0x14)
		A4 = 0xffff0000 + rings.around.first.state

	while (A1 != A2)
	{
		// Check if already collected
		if (u16[A4] == 0)
		{
			u16 ring.x = u16[A1 + 0]
			u16 ring.y = u16[A1 + 2]

			s16 ring.offset = 6
			s16 ring.size = 12

			u16 px = ring.x - ring.offset
			u16 py = ring.y - ring.offset

		#if STANDALONE
			// Consider vertical level wrap
			if (level.vertical_wrap == 0xff00 && !original_mode)
			{
				s16 dy = py - box.pos.y
				if (dy < -s16(level.height.bitmask)/2)
				{
					py += (level.height.bitmask + 1)
				}
				else if (dy > level.height.bitmask/2)
				{
					py -= (level.height.bitmask + 1)
				}
			}
		#endif

			if (checkBoxOverlap(box.pos.x, box.pos.y, box.size.x, box.size.y, px, py, ring.size, ring.size))
			{
				if (char.bonus_effect & char.bonus.SHIELD_LIGHTNING)
				{
					if (makeDynamicRing())
						return
				}

				// Start ring animation, ring counts as collected now
				u16[A4] = 0x0604

				// Collect this ring
				CollectLevelRing()

				// This seems to be some kind of table of the currently animated rings
				A3 = 0xffffef82
				while (u16[A3] != 0)
				{
					A3 += 2
				}
				u16[A3] = A4.u16

				++u16[0xffffef80]
			}
		}

		A1 += 4
		A4 += 2
	}
}





// Upon entering a bonus stage or special stage, clear out the animations for any rings actively being collected.
// Function taken from objects\basics\checkpoint.lemon, although objects\basics\giantring.lemon also calls it in fn06185c() when special stage entry whites out the screen.
//# address-hook(0x01bb7e) end(0x01bbbc)
function void fn01bb7e()
{
	// Reset all respawn entries for the actually instanced objects, so they will respawn when returning to the main game
	A1 = 0xffffb0de
	for (u8 i = 0; i < 0x5a; ++i)
	{
		A1 += 0x4a
		if (u32[A1] != 0 && objA1.respawn_entry != 0)
		{
			A2 = 0xffff0000 + objA1.respawn_entry
			u8[A2] &= ~0x80
		}
	}

	u32 ringAnimationPointer	// The old code assumed the object respawn table was immediately after the ring state table. Now we use a variable to hold addresses.
	A2 = 0xffffef80
	D1.u16 = u16[(A2+=2)-2]
	while (D1.s16 > 0)
	{
		while (true)
		{
			D0.u16 = u16[(A2+=2)-2]
			if (D0.u16 != 0)
				break
		}

		ringAnimationPointer = 0x820000 + D0.s16	// used to set A1.s32 = D0.s16, but we need to get into shared memory.
		u16[ringAnimationPointer] = 0xffff			// used to write a word to the address at A1
		u16[A2-2] = 0
		--u16[0xffffef80]
		--D1.s16
	}
}





// Correctly handle DDZ horizontal loop (at 0x7400) during final boss.
// Function taken from bosses\boss_ddz1.lemon
//# address-hook(0x081726) end(0x08179a)
function void fn081726()
{
	u16[0xfffffaae] = 0
	D0.u16 = camera.position.x.u16
	if (D0.u16 >= 0x7400)
	{
		D1.u16 = 0x2000		// distance to move camera, boss, and player to the left
		D0.u16 -= D1.u16
		camera.position.x.u16 = D0.u16
		fn01bbbe()

	//	zeroMemory(0xffffe700, 0x400)
		zeroMemory(0x820000, 2 * rings.state_table_size)

		D0.u16 = (camera.position.x.u16 - 0x80) & 0xff80
		level.despawn_position.x = D0.u16

		D1.u16 = 0x2000		// distance to move camera, boss, and player to the left
		u16[0xfffffaae] = D1.u16
		objA0.position.x.u16 -= D1.u16
	}

	fn082742()
	fn082772()
	fn0828b2()

	D0.u16 = u16[0xfffffabc]
	D1.u16 = debug_mode.state
	u16[0xfffffabc] = D1.u16
	D0.u16 ^= D1.u16
	if (D0.u16 != 0)
	{
		fn08151c()
	}

	if (D1.u16 == 0)
	{
		fn082920()
		fn0829d2()
	}
}





// Expand the object respawn table into the old ring state table so that it is no longer limited to 0x300 (decimal 768) bytes (object cap).
// Function taken from general\objectspawning.lemon
//# address-hook(0x01b6a8) end(0x01b9fe)
function void DynamicObjectsLoading.Init()
{
	u32 object_respawn_table = (global.zone != 0x0c) ? 0xffffe700 : 0xffffeb00	// Once at 0xffffeb00, this now extends back through the old ring state table.
																				// However, DDZ final boss seems to be hardcoded in a way that requires the base game structure.
																				// Checking the zone ID only also covers DEZ2 final boss, but this is not an issue.
	u16 object_respawn_table_size = (global.zone != 0x0c) ? 0x0700 : 0x0300 	// This can go up to 0x700 (ending at 0xffffedff). This is a LOT of objects!
																				// Sacrificing unneeded space can open up extra RAM. Again, DDZ requires the base structure.

	// First object type table is used in Sonic 3 levels + FBZ, and the bonus stages
	// Second object type table is used in MHZ, SOZ and everything afterwards
	bool useFirstObjectTypeTable = (global.zone < 0x16 && (global.zone <= 0x06 || global.zone >= 0x0e))
	level.object_type_table = useFirstObjectTypeTable ? 0x094ea2 : 0x0952a2

	dynobjects.routine += 4			// Use "DynamicObjectsLoading.UpdateDefault()"
	if (global.in_extra_stage == 0 || (specialstages_knuckles && unlock_act && isMainCharacter(CHARACTER_KNUCKLES)))
	{
	//	zeroMemory(0xffffeb00, 0x300)								// standard object respawn table
		zeroMemory(object_respawn_table, object_respawn_table_size)	// new object respawn table location and size
	}

	// Values for the object table base address (stored into A0):
	//  - 0x1e44da		-> AIZ 1 (i.e. the technical act 1 = until everything gets set on fire)
	//  - 0x1e4876		-> AIZ 2
	//  - 0x1e6090		-> HCZ 1
	//  - 0x1e6990		-> HCZ 2
	//  - 0x1e8088		-> MGZ 1
	//  - 0x1e932c		-> MGZ 2
	//  - 0x1ea0c2		-> CNZ 1
	//  - 0x1eac38		-> CNZ 2
	//  - 0x1ee3ca		-> ICZ 1 (probably only the technical act 1)
	//  - 0x1ee9a6		-> ICZ 2
	//  - 0x1efc42		-> LBZ 1
	//  - 0x1f065c		-> LBZ 2
	//     ...
	u8 offset = global.zone * 8 + global.act * 4
	A0 = u32[0x1e3d98 + offset]
#if STANDALONE
	LevelObjectTableBuilder.buildObjects()
#endif

	bool useDefault = false
	if (global.zone <= 0x12 && competition_mode.active == 0)
	{
		useDefault = true
	}
	else if (global.zone == 0x14)
	{
		useDefault = true
	}
	else if (global.zone >= 0x16 && global.zone_act != 0x1701)
	{
		useDefault = true
	}

	if (useDefault)
	{
		dynobjects.addr.begin = A0
		dynobjects.addr.end = A0

		// u32 defaultA3 = 0xffffeb00				// standard object respawn table
		u32 defaultA3 = object_respawn_table		// new object respawn table location
		if (global.zone == 0x14)
		{
			// Special handling for Glowing Spheres bonus stage
			//  -> It uses object spawning (unlike the other bonus stages), but may not change the actual object respawn table
			zeroMemory(0xffff8400, 0x200)
			defaultA3 = 0xffff8400
		}

		A3 = defaultA3
		D6.u16 = max(0, s16(camera.position.x.u16 - 0x80)) & 0xff80
		A0 = dynobjects.addr.end
		while (u16[A0] < D6.u16)
		{
			A0 += 6
			++A3
		}
		dynobjects.addr.end = A0
		dynobjects.respawn.end = A3.u16

		A3 = defaultA3
		A0 = dynobjects.addr.begin
		D6.u16 -= 0x80
		if (D6.s16 >= 0)
		{
			while (u16[A0] < D6.u16)
			{
				A0 += 6
				++A3
			}
		}
		dynobjects.addr.begin = A0
		dynobjects.respawn.begin = A3.u16

		dynobjects.areastart.x = 0xffff
		dynobjects.areastart.y = camera.position.y.u16 & 0xff80

		DynamicObjectsLoading.UpdateDefault()
	}
	else
	{
		// Load all objects at once and don't unload them
		// This is used by:
		//  - HPZ if entered by giant ring (see check below)
		//  - Bonus stages GM and SM (but not GS)
		//  - Competition mode
		bool isHPZviaGiantRing = (global.zone_act == 0x1701)

		dynobjects.routine += 8		// Empty dynamic objects loading routine
		if (allocDynamicObjectStd())
		{
			A3 = 0xfffff712
			A4 = level.object_type_table
			D6.u16 = isHPZviaGiantRing ? 0x1780 : 0x0800

			while (D6.u16 > u16[A0])
			{
				ObjectSpawning.SpawnFixedObject()
				if (!_equal())
					break
			}
		}

		if (isHPZviaGiantRing)
		{
			level.despawn_position.x = (camera.position.x.u16 - 0x80) & 0xff80
		}
		else
		{
			level.despawn_position.x = 0
		}
	}
}

// Use the Sonic 2 object table when needed.
// Functions taken from general\objectspawning.lemon
//# address-hook(0x01ba0c) end(0x01ba3c)
function void ObjectSpawning.SpawnFixedObject()
{
	u16 px			 = u16[A0]
	u16 py			 = u16[A0+2] & 0x0fff
	u8 flipFlags	 = (u16[A0+2] >> 13) & (render_flag.FLIP_X | render_flag.FLIP_Y)
	u8 objectType	 = u8[A0+4]
	u8 objectSubtype = u8[A0+5]

	if (!unlock_act)
		objA1.update_address = u32[A4 + u16(objectType) * 4]
	else
		objA1.update_address = S2.ObjectTable[objectType]
	
	objA1.position.x.u16 = px
	objA1.position.y.u16 = py
	objA1.render_flags = flipFlags
	u8[A1 + 0x2a] = flipFlags
	u8[A1 + 0x2c] = objectSubtype
	objA1.respawn_entry = A3.u16
	A0 += 6

	AllocDynamicObjectAfterA1()
}

function bool conditionalSpawnDynamicObject(bool considerLevelWrap, bool forceYPositionCheck)
{
	// Check for flag in respawn table entry
	if (u8[A3] & 0x80)
		return true

	u16 px			 = u16[A0]
	u16 py			 = u16[A0+2] & D5.u16		// D5.u16 is usually 0x0fff here
	u8 flipFlags	 = (u16[A0+2] >> 13) & (render_flag.FLIP_X | render_flag.FLIP_Y)
	bool checkYPos	 = (u16[A0+2] & 0x8000) == 0
	u8 objectType	 = u8[A0+4]
	u8 objectSubtype = u8[A0+5]

	if (checkYPos || forceYPositionCheck)
	{
		if (considerLevelWrap)
		{
			if (py < D3.u16 && py > D4.u16)
			{
				return true
			}
		}
		else
		{
			if (py < D3.u16 || py > D4.u16)
			{
				return true
			}
		}
	}

	u32 updateAddress = (unlock_act) ? S2.ObjectTable[objectType] : u32[A4 + u16(objectType) * 4]

	// Set flag in respawn table entry
	u8[A3] |= 0x80

	objA1.update_address = updateAddress
	objA1.position.x.u16 = px
	objA1.position.y.u16 = py
	objA1.render_flags = flipFlags
	u8[A1 + 0x2a] = flipFlags
	u8[A1 + 0x2c] = objectSubtype
	objA1.respawn_entry = A3.u16

	return allocDynamicObjectAfterA1()
}

constant array<u32> S2.ObjectTable =
{
	0x01a51a,	// 0x00		// Ring
	0x01d566,	// 0x01		// Monitor (normally Sonic in S2; should be using ID 26 instead)
	0x01a51a,	// 0x02		// Ring (normally Tails in S2)
	0x01ccae,	// 0x03		// Path Swapper
	0x01a51a,	// 0x04		// Ring
	0x01a51a,	// 0x05		// Ring
	0x0214c4,	// 0x06		// Corkscrew bridge (EHZ), must be pointed at FBZ rotating cylinder when in MTZ
	0x01a51a,	// 0x07		// Ring
	0x01a51a,	// 0x08		// Ring
	0x01a51a,	// 0x09		// Ring
	0x01a51a,	// 0x0a		// Ring
	0x02536c,	// 0x0b		// CPZ pipe top flipping platform
	0x01a51a,	// 0x0c		// Ring
	0x0836e0,	// 0x0d		// Hidden monitor (normally signpost in S2)
	0x01a51a,	// 0x0e		// Ring
	0x01a51a,	// 0x0f		// Ring
	0x01a51a,	// 0x10		// Ring
	0x038688,	// 0x11		// EHZ Bridge (using code for HCZ/ICZ/LRZ, not S2 code)
	0x01a51a,	// 0x12		// Ring
	0x01a51a,	// 0x13		// Ring
	0x01a51a,	// 0x14		// Ring
	0x01a51a,	// 0x15		// Ring
	0x01a51a,	// 0x16		// Ring
	0x01a51a,	// 0x17		// Ring
	0x025506,	// 0x18		// EHZ/ARZ/HTZ moving platforms (referencing code for AIZ and LBZ platforms, not S2 code)
	0x022018,	// 0x19		// CPZ moving platforms
	0x01a51a,	// 0x1a		// Ring
	0x0222ac,	// 0x1b		// CPZ speed booster
	0x02b928,	// 0x1c		// EHZ bridge support (using code for decorative sprite objects from S3&K, not S2 code)
	0x02536a,	// 0x1d		// CPZ chemical orbs
	0x02259c,	// 0x1e		// CPZ spin tube
	0x01a51a,	// 0x1f		// Ring
	0x01a51a,	// 0x20		// Ring
	0x01a51a,	// 0x21		// Ring
	0x01a51a,	// 0x22		// Ring
	0x01a51a,	// 0x23		// Ring
	0x01a51a,	// 0x24		// Ring
	0x01a51a,	// 0x25		// Ring
	0x01d566,	// 0x26		// Monitor (using S3&K code, not S2 code)
	0x01a51a,	// 0x27		// Ring
	0x01a51a,	// 0x28		// Ring
	0x01a51a,	// 0x29		// Ring
	0x01a51a,	// 0x2a		// Ring
	0x01a51a,	// 0x2b		// Ring
	0x01a51a,	// 0x2c		// Ring
	0x030e24,	// 0x2d		// CPZ/MTZ/DEZ door (using S3&K code, not S2 code)
	0x01a51a,	// 0x2e		// Ring
	0x01a51a,	// 0x2f		// Ring
	0x01a51a,	// 0x30		// Ring
	0x01a51a,	// 0x31		// Ring
	0x02a3d0,	// 0x32		// CPZ tube block (using FBZ cork block code, not S2 code)
	0x01a51a,	// 0x33		// Ring
	0x01a51a,	// 0x34		// Ring
	0x01a51a,	// 0x35		// Ring
	0x023f84, 	// 0x36		// Spikes (using S3&K code, not S2 code)
	0x01a51a,	// 0x37		// Ring
	0x01a51a,	// 0x38		// Ring
	0x01a51a,	// 0x39		// Ring
	0x01a51a,	// 0x3a		// Ring
	0x01a51a,	// 0x3b		// Ring
	0x02131c,	// 0x3c		// Breakable wall (using S3&K code, not S2 code)
	0x01a51a,	// 0x3d		// Ring
	0x031164,	// 0x3e		// Ring (Normally Egg Prison in S2, but currently pointing to the S3 object with same ID: the HCZ conveyor belt)
	0x01a51a,	// 0x3f		// Ring
	0x026370,	// 0x40		// CPZ/ARZ/MCZ springboard
	0x022d06,	// 0x41		// Spring (using S3&K code, not S2 code)
	0x01a51a,	// 0x42		// Ring
	0x01a51a,	// 0x43		// Ring
	0x01a51a,	// 0x44		// Ring
	0x01a51a,	// 0x45		// Ring
	0x01a51a,	// 0x46		// Ring
	0x01a51a,	// 0x47		// Ring
	0x01a51a,	// 0x48		// Ring
	0x020b9e,	// 0x49		// EHZ waterfall
	0x01a51a,	// 0x4a		// Ring
	0x02d068,	// 0x4b		// EHZ Buzzer
	0x01a51c,	// 0x4c		// Mini Time Stone
	0x047776,	// 0x4d		// Red Star Ring
	0x024d68,	// 0x4e		// Jump ramp from AIZ, SOZ, LRZ
	0x01a51a,	// 0x4f		// Ring
	0x01a51a,	// 0x50		// Ring
	0x01a51a,	// 0x51		// Ring
	0x01a51a,	// 0x52		// Ring
	0x01a51a,	// 0x53		// Ring
	0x01a51a,	// 0x54		// Ring
	0x01a51a,	// 0x55		// Ring
	0x01a51a,	// 0x56		// Ring
	0x01a51a,	// 0x57		// Ring
	0x01a51a,	// 0x58		// Ring
	0x01a51a,	// 0x59		// Ring
	0x01a51a,	// 0x5a		// Ring
	0x01a51a,	// 0x5b		// Ring
	0x047782,	// 0x5c		// EHZ Masher
	0x01a51a,	// 0x5d		// Ring
	0x01a51a,	// 0x5e		// Ring
	0x01a51a,	// 0x5f		// Ring
	0x01a51a,	// 0x60		// Ring
	0x01a51a,	// 0x61		// Ring
	0x01a51a,	// 0x62		// Ring
	0x01a51a,	// 0x63		// Ring
	0x01a51a,	// 0x64		// Ring
	0x01a51a,	// 0x65		// Ring
	0x01a51a,	// 0x66		// Ring
	0x01a51a,	// 0x67		// Ring
	0x01a51a,	// 0x68		// Ring
	0x01a51a,	// 0x69		// Ring
	0x01a51a,	// 0x6a		// Ring
	0x027d6c,	// 0x6b		// CPZ moving blocks
	0x01a51a,	// 0x6c		// Ring
	0x01a51a,	// 0x6d		// Ring
	0x01a51a,	// 0x6e		// Ring
	0x01a51a,	// 0x6f		// Ring
	0x01a51a,	// 0x70		// Ring
	0x01a51a,	// 0x71		// Ring
	0x01a51a,	// 0x72		// Ring
	0x01a51a,	// 0x73		// Ring
	0x01ec18,	// 0x74		// Invisible object (using S3&K code, not S2 code)
	0x01a51a,	// 0x75		// Ring
	0x01a51a,	// 0x76		// Ring
	0x01a51a,	// 0x77		// Ring
	0x04763e,	// 0x78		// CPZ blocks that form stairs (using code for S&K DEZ stairs, not S2 code)
	0x02cfa8,	// 0x79		// Star post (using S3&K code, not S2 code)
	0x0293a0,	// 0x7a		// CPZ pipe top moving platform
	0x029590,	// 0x7b		// CPZ tube spring
	0x01a51a,	// 0x7c		// Ring (normally CPZ background pylon/pillar in S2)
	0x01a51a,	// 0x7d		// Ring
	0x01a51a,	// 0x7e		// Ring
	0x01a51a,	// 0x7f		// Ring
	0x02f938,	// 0x80		// Air bubble spawner
	0x01a51a,	// 0x81		// Ring
	0x01a51a,	// 0x82		// Ring
	0x01a51a,	// 0x83		// Ring
	0x01a51a,	// 0x84		// Ring
	0x01a51a,	// 0x85		// Ring
	0x01a51a,	// 0x86		// Ring
	0x01a51a,	// 0x87		// Ring
	0x01a51a,	// 0x88		// Ring
	0x01a51a,	// 0x89		// Ring
	0x01a51a,	// 0x8a		// Ring
	0x01a51a,	// 0x8b		// Ring
	0x01a51a,	// 0x8c		// Ring
	0x01a51a,	// 0x8d		// Ring
	0x01a51a,	// 0x8e		// Ring
	0x01a51a,	// 0x8f		// Ring
	0x01a51a,	// 0x90		// Ring
	0x01a51a,	// 0x91		// Ring
	0x01a51a,	// 0x92		// Ring
	0x01a51a,	// 0x93		// Ring
	0x01a51a,	// 0x94		// Ring
	0x01a51a,	// 0x95		// Ring
	0x01a51a,	// 0x96		// Ring
	0x01a51a,	// 0x97		// Ring
	0x01a51a,	// 0x98		// Ring
	0x01a51a,	// 0x99		// Ring
	0x01a51a,	// 0x9a		// Ring
	0x01a51a,	// 0x9b		// Ring
	0x01a51a,	// 0x9c		// Ring
	0x037bfa,	// 0x9d		// EHZ Coconuts
	0x01a51a,	// 0x9e		// Ring
	0x01a51a,	// 0x9f		// Ring
	0x01a51a,	// 0xa0		// Ring
	0x01a51a,	// 0xa1		// Ring
	0x01a51a,	// 0xa2		// Ring
	0x01a51a,	// 0xa3		// Ring
	0x01a51a,	// 0xa4		// Ring
	0x038aea,	// 0xa5		// CPZ Spiny (horizontal)
	0x038b86,	// 0xa6		// CPZ Spiny (vertical)
	0x038dba,	// 0xa7		// CPZ Grabber
	0x01a51a,	// 0xa8		// Ring (sub-object for Grabber in S2)
	0x01a51a,	// 0xa9		// Ring (sub-object for Grabber in S2)
	0x01a51a,	// 0xaa		// Ring (sub-object for Grabber in S2)
	0x01a51a,	// 0xab		// Ring
	0x01a51a,	// 0xac		// Ring
	0x01a51a,	// 0xad		// Ring
	0x01a51a,	// 0xae		// Ring
	0x01a51a,	// 0xaf		// Ring
	0x01a51a,	// 0xb0		// Ring
	0x01a51a,	// 0xb1		// Ring
	0x01a51a,	// 0xb2		// Ring
	0x01a51a,	// 0xb3		// Ring
	0x01a51a,	// 0xb4		// Ring
	0x01a51a,	// 0xb5		// Ring
	0x01a51a,	// 0xb6		// Ring
	0x01a51a,	// 0xb7		// Ring
	0x01a51a,	// 0xb8		// Ring
	0x01a51a,	// 0xb9		// Ring
	0x01a51a,	// 0xba		// Ring
	0x01a51a,	// 0xbb		// Ring
	0x01a51a,	// 0xbc		// Ring
	0x01a51a,	// 0xbd		// Ring
	0x01a51a,	// 0xbe		// Ring
	0x01a51a,	// 0xbf		// Ring
	0x01a51a,	// 0xc0		// Ring
	0x01a51a,	// 0xc1		// Ring
	0x01a51a,	// 0xc2		// Ring
	0x01a51a,	// 0xc3		// Ring
	0x01a51a,	// 0xc4		// Ring
	0x01a51a,	// 0xc5		// Ring
	0x01a51a,	// 0xc6		// Ring
	0x01a51a,	// 0xc7		// Ring
	0x01a51a,	// 0xc8		// Ring
	0x01a51a,	// 0xc9		// Ring
	0x01a51a,	// 0xca		// Ring
	0x01a51a,	// 0xcb		// Ring
	0x01a51a,	// 0xcc		// Ring
	0x01a51a,	// 0xcd		// Ring
	0x01a51a,	// 0xce		// Ring
	0x01a51a,	// 0xcf		// Ring
	0x01a51a,	// 0xd0		// Ring
	0x01a51a,	// 0xd1		// Ring
	0x01a51a,	// 0xd2		// Ring
	0x01a51a,	// 0xd3		// Ring
	0x01a51a,	// 0xd4		// Ring
	0x01a51a,	// 0xd5		// Ring
	0x01a51a,	// 0xd6		// Ring
	0x01a51a,	// 0xd7		// Ring
	0x01a51a,	// 0xd8		// Ring
	0x01a51a,	// 0xd9		// Ring
	0x01a51a,	// 0xda		// Ring
	0x01a51a,	// 0xdb		// Ring
	0x01a51a,	// 0xdc		// Ring
	0x01a51a,	// 0xdd		// Ring
	0x01a51a,	// 0xde		// Ring
	0x01a51a,	// 0xdf		// Ring
	0x01a51a,	// 0xe0		// Ring
	0x01a51a,	// 0xe1		// Ring
	0x01a51a,	// 0xe2		// Ring
	0x01a51a,	// 0xe3		// Ring
	0x01a51a,	// 0xe4		// Ring
	0x01a51a,	// 0xe5		// Ring
	0x01a51a,	// 0xe6		// Ring
	0x01a51a,	// 0xe7		// Ring
	0x01a51a,	// 0xe8		// Ring
	0x01a51a,	// 0xe9		// Ring
	0x01a51a,	// 0xea		// Ring
	0x01a51a,	// 0xeb		// Ring
	0x01a51a,	// 0xec		// Ring
	0x01a51a,	// 0xed		// Ring
	0x01a51a,	// 0xee		// Ring
	0x01a51a,	// 0xef		// Ring
	0x01a51a,	// 0xf0		// Ring
	0x01a51a,	// 0xf1		// Ring
	0x01a51a,	// 0xf2		// Ring
	0x01a51a,	// 0xf3		// Ring
	0x01a51a,	// 0xf4		// Ring
	0x01a51a,	// 0xf5		// Ring
	0x01a51a,	// 0xf6		// Ring
	0x01a51a,	// 0xf7		// Ring
	0x01a51a,	// 0xf8		// Ring
	0x01a51a,	// 0xf9		// Ring
	0x01a51a,	// 0xfa		// Ring
	0x01a51a,	// 0xfb		// Ring
	0x01a51a,	// 0xfc		// Ring
	0x01a51a,	// 0xfd		// Ring
	0x01a51a,	// 0xfe		// Ring
	0x01a51a,	// 0xff		// Ring
}