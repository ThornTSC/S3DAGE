function void Flicky.HUD.drawSprite(u64 key, u16 px, u16 py, u16 renderQueue)
{
    u16 inputY = py
  	if ((time_attack == 1 || time_attack == 2) && py != 0x48 && !HUD.isShadowTarget(key))	// 0x48 is the height of Shadow's boost bar
	{
        py -= 0x10
		if (time_attack_hud)	// center HUD?
		{
			//px += 136			// move time and rings to the right, half a pixel left of center
			px += getScreenWidth() / 2 - 64
			if (inputY == 0x28)	// rings?
				px += 13		// move even more to the right. Note that this is 1px more than it should be for aesthetics, lining up TIME's M with RINGS' R.
		}
	}
//	if (px >= 0x58 && px <= 0x68 && py == 0x28)	// Rings in Mania HUD position
//		px -= 0x18								// move to classic position
	Renderer.drawCustomSprite(key, px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
	if (inputY == 0x18 && freeze_time)	// HUD graphics have a base py of 0x08, and the TIME row is 0x10 beyond that
    {
		if (freeze_time >= 64)
		{
			if (key == "flicky_hud_char_minutes")
				Renderer.drawCustomSprite("flicky_hud_char_minutes_chaosstage", px, py, 0, SPRITE_FLAG_PRIO, renderQueue + 1, 0, 255)
			else if (key == "flicky_hud_char_seconds")
				Renderer.drawCustomSprite("flicky_hud_char_seconds_chaosstage", px, py, 0, SPRITE_FLAG_PRIO, renderQueue + 1, 0, 255)
			else if (key == "flicky_hud_char_colon")
				Renderer.drawCustomSprite("flicky_hud_char_colon_chaosstage", px, py, 0, SPRITE_FLAG_PRIO, renderQueue + 1, 0, 255)
			else if (key == "flicky_hud_text_time")
				Renderer.drawCustomSprite("flicky_hud_text_time_chaosstage", px, py, 0, SPRITE_FLAG_PRIO, renderQueue + 1, 0, 255)
		}
		else
		{
			if (key == "flicky_hud_char_minutes")
				Renderer.drawCustomSprite("flicky_hud_char_minutes_chaosstage", px, py, 0, SPRITE_FLAG_PRIO, renderQueue + 1, 0, freeze_time * 4)
			else if (key == "flicky_hud_char_seconds")
				Renderer.drawCustomSprite("flicky_hud_char_seconds_chaosstage", px, py, 0, SPRITE_FLAG_PRIO, renderQueue + 1, 0, freeze_time * 4)
			else if (key == "flicky_hud_char_colon")
				Renderer.drawCustomSprite("flicky_hud_char_colon_chaosstage", px, py, 0, SPRITE_FLAG_PRIO, renderQueue + 1, 0, freeze_time * 4)
			else if (key == "flicky_hud_text_time")
				Renderer.drawCustomSprite("flicky_hud_text_time_chaosstage", px, py, 0, SPRITE_FLAG_PRIO, renderQueue + 1, 0, freeze_time * 4)
		}
    }
}

function void Flicky.HUD.drawDigit_Challenges(u8 digit, u16 px, u16 py, u16 renderQueue)
{
    u16 inputY = py
    if (time_attack == 1 || time_attack == 2)
	{
        py -= 0x10
		if (time_attack_hud)	// center HUD?
		{
			// px += 136			// move time and rings to the right, half a pixel left of center
			px += getScreenWidth() / 2 - 64
			if (inputY == 0x28)	// rings?
				px += 12		// move even more to the right
		}
	}
	Renderer.drawCustomSprite(stringformat("flicky_hud_digit_%d", digit), px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
	if (inputY == 0x18 && freeze_time)	// HUD graphics have a base py of 0x08, and the TIME row is 0x10 beyond that
		if (freeze_time >= 64)
			Renderer.drawCustomSprite(stringformat("flicky_hud_digit_%d_chaosstage", digit), px, py, 0, SPRITE_FLAG_PRIO, renderQueue + 1, 0, 255)
		else
			Renderer.drawCustomSprite(stringformat("flicky_hud_digit_%d_chaosstage", digit), px, py, 0, SPRITE_FLAG_PRIO, renderQueue + 1, 0, freeze_time * 4)
}

function void Flicky.BestText(u16 px, u16 py, u16 renderQueue)
{
    Renderer.drawCustomSprite("flicky_hud_text_best", px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
}

function void Flicky.NewRecordText()
{
	Renderer.drawCustomSprite("flicky_new_record", getScreenWidth() / 2, 0x30, 0, SPRITE_FLAG_PRIO, 0xe001, 0, 255)
}

function void Flicky.TimeStopBonusText()
{
	Renderer.drawCustomSprite("flicky_time_stop_bonus", getScreenWidth() - 62 - 16, 0x10, 0, SPRITE_FLAG_PRIO, 0xe001, 0, 255)	// 62 = sprite center, 16 = space to screen edge
}

function void Flicky.DevText(u16 medal_py)
{
    Renderer.drawCustomSprite("flicky_text_dev", getScreenWidth() - 97, medal_py, 0, SPRITE_FLAG_PRIO, 0xf003)   
}

function void Flicky.TargetTime(u16 medal_px, u16 medal_py, u8 medalOffset)
{
    u32 medal_time_address = 0x840240 + (0x10 * (setting.levelselect.characters - 1)) + medalOffset
    u16 medal_time_minutes = u8[medal_time_address + 1]
    u16 medal_time_seconds = u8[medal_time_address + 2]
    u16 medal_time_frames = u8[medal_time_address + 3]
    u16 medal_time_centiseconds = (medal_time_frames * 99 + 30) / 59

    Renderer.drawCustomSprite(stringformat("flicky_smalldigit_%d", medal_time_minutes % 10), getScreenExtend() - 40 + medal_px, medal_py, 0, SPRITE_FLAG_PRIO, 0xf003)
    Renderer.drawCustomSprite("flicky_smallchar_minutes", getScreenExtend() - 40 + medal_px + 0x07, medal_py, 0, SPRITE_FLAG_PRIO, 0xf003)
    Renderer.drawCustomSprite(stringformat("flicky_smalldigit_%d", medal_time_seconds / 10), getScreenExtend() - 40 + medal_px + 0x0d, medal_py, 0, SPRITE_FLAG_PRIO, 0xf003)
    Renderer.drawCustomSprite(stringformat("flicky_smalldigit_%d", medal_time_seconds % 10), getScreenExtend() - 40 + medal_px + 0x15, medal_py, 0, SPRITE_FLAG_PRIO, 0xf003)
    Renderer.drawCustomSprite("flicky_smallchar_seconds", getScreenExtend() - 40 + medal_px + 0x1d, medal_py, 0, SPRITE_FLAG_PRIO, 0xf003)
    Renderer.drawCustomSprite(stringformat("flicky_smalldigit_%d", medal_time_centiseconds / 10), getScreenExtend() - 40 + medal_px + 0x25, medal_py, 0, SPRITE_FLAG_PRIO, 0xf003)
    Renderer.drawCustomSprite(stringformat("flicky_smalldigit_%d", medal_time_centiseconds % 10), getScreenExtend() - 40 + medal_px + 0x2d, medal_py, 0, SPRITE_FLAG_PRIO, 0xf003)
}

function void Flicky.TAEndMenu()
{
	if (TA_menu_selection < 3)
	{
		Renderer.drawCustomSprite(stringformat("flicky_ta_retry_%d", TA_menu_selection), getScreenWidth()/2, getScreenHeight()/2 - 16, 0, SPRITE_FLAG_PRIO, 0xe001, 0, 255)
		Renderer.drawCustomSprite(stringformat("flicky_ta_select_act_%d", TA_menu_selection), getScreenWidth()/2, getScreenHeight()/2, 0, SPRITE_FLAG_PRIO, 0xe001, 0, 255)	// center of screen vertically
		Renderer.drawCustomSprite(stringformat("flicky_ta_exit_game_%d", TA_menu_selection), getScreenWidth()/2, getScreenHeight()/2 + 16, 0, SPRITE_FLAG_PRIO, 0xe001, 0, 255)
	}
	else
	{
		Renderer.drawCustomSprite(stringformat("flicky_cancel_%d", TA_menu_selection), getScreenWidth()/2, getScreenHeight()/2 - 16, 0, SPRITE_FLAG_PRIO, 0xe001, 0, 255)
		Renderer.drawCustomSprite(stringformat("flicky_main_menu_%d", TA_menu_selection), getScreenWidth()/2, getScreenHeight()/2, 0, SPRITE_FLAG_PRIO, 0xe001, 0, 255)	// center of screen vertically
		Renderer.drawCustomSprite(stringformat("flicky_air_menu_%d", TA_menu_selection), getScreenWidth()/2, getScreenHeight()/2 + 16, 0, SPRITE_FLAG_PRIO, 0xe001, 0, 255)
	}
}

function void Flicky.PauseMenu_Normal()
{
    Renderer.drawCustomSprite("blackscreen", 0, 0, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff0, 0, 0xc0)	// dim background
    Renderer.drawCustomSprite("flicky_paused", getScreenWidth()/2, 56, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff1)	// PAUSED text
    Renderer.drawCustomSprite("3_option_dim", getScreenWidth()/2, getScreenHeight()/2, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff1, 0, 204)		// menu border rectangle (80% opacity)
    Renderer.drawCustomSprite(stringformat("flicky_normal_continue_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2 - 16, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)
    Renderer.drawCustomSprite(stringformat("flicky_normal_restart_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)	// center of screen vertically
    Renderer.drawCustomSprite(stringformat("flicky_normal_exit_game_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2 + 16, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)
}

function void Flicky.PauseMenu_Restart()
{
    Renderer.drawCustomSprite("blackscreen", 0, 0, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff0, 0, 0xc0)	// dim background
    Renderer.drawCustomSprite("flicky_paused", getScreenWidth()/2, 56, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff1)	// PAUSED text
    Renderer.drawCustomSprite("3_option_dim", getScreenWidth()/2, getScreenHeight()/2, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff1, 0, 204)		// menu border rectangle (80% opacity)
    Renderer.drawCustomSprite(stringformat("flicky_normal_cancel_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2 - 16, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)
    Renderer.drawCustomSprite(stringformat("flicky_normal_star_post_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)	// center of screen vertically
    Renderer.drawCustomSprite(stringformat("flicky_normal_act_start_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2 + 16, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)
}

function void Flicky.PauseMenu_ExitGame()
{
    Renderer.drawCustomSprite("blackscreen", 0, 0, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff0, 0, 0xc0)	// dim background
    Renderer.drawCustomSprite("flicky_paused", getScreenWidth()/2, 56, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff1)	// PAUSED text
    Renderer.drawCustomSprite("3_option_dim", getScreenWidth()/2, getScreenHeight()/2, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff1, 0, 204)		// menu border rectangle (80% opacity)
    Renderer.drawCustomSprite(stringformat("flicky_cancel_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2 - 16, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)
    Renderer.drawCustomSprite(stringformat("flicky_main_menu_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)	// center of screen vertically
    Renderer.drawCustomSprite(stringformat("flicky_air_menu_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2 + 16, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)
}

function void Flicky.PauseMenu_Basic()
{
    Renderer.drawCustomSprite("blackscreen", 0, 0, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff0, 0, 0xc0)	// dim background
    Renderer.drawCustomSprite("flicky_paused", getScreenWidth()/2, 56, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff1)	// PAUSED text
    Renderer.drawCustomSprite("2_option_dim", getScreenWidth()/2, getScreenHeight()/2, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff1, 0, 204)		// menu border rectangle (80% opacity)
    Renderer.drawCustomSprite(stringformat("flicky_normal_continue_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2 - 8, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)
    Renderer.drawCustomSprite(stringformat("flicky_normal_exit_game_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2 + 8, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)
}

function void Flicky.PauseMenu_BlueSphere()
{
    Renderer.drawCustomSprite("blackscreen", 0, 0, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff0, 0, 0xc0)	// dim background
    Renderer.drawCustomSprite("flicky_paused", getScreenWidth()/2, 56, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff1)	// PAUSED text
    Renderer.drawCustomSprite("3_option_dim", getScreenWidth()/2, getScreenHeight()/2, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff1, 0, 204)		// menu border rectangle (80% opacity)
    Renderer.drawCustomSprite(stringformat("flicky_ss_continue_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2 - 16, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)
    Renderer.drawCustomSprite(stringformat("flicky_ss_retry_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)	// center of screen vertically
    Renderer.drawCustomSprite(stringformat("flicky_ss_exit_game_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2 + 16, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)
}

function void Flicky.PauseMenu_Challenges()
{
	Renderer.drawCustomSprite("blackscreen", 0, 0, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff0, 0, 0xc0)	// dim background
	Renderer.drawCustomSprite("flicky_paused", getScreenWidth()/2, 56, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff1)	// PAUSED text
	Renderer.drawCustomSprite("4_option_dim", getScreenWidth()/2, getScreenHeight()/2, 0x00, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff1, 0, 204)		// menu border rectangle (80% opacity)
	Renderer.drawCustomSprite(stringformat("flicky_challenge_pause_continue_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2 - 24, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)
	Renderer.drawCustomSprite(stringformat("flicky_challenge_pause_retry_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2 - 8, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)	// center of screen vertically - 6
	Renderer.drawCustomSprite(stringformat("flicky_challenge_pause_select_act_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2 + 8, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)	// center of screen vertically + 6
	Renderer.drawCustomSprite(stringformat("flicky_challenge_pause_exit_game_%d", pause_menu_selection), getScreenWidth()/2, getScreenHeight()/2 + 24, 0, SPRITE_FLAG_PRIO + SPRITE_FLAG_NO_GLOBAL_TINT, 0xfff2, 0, 255)
}

function void Flicky.TotalStars(u16 starCount, u16 x_offset, u16 y_offset, u16 spriteFlags, u16 renderQueue)
{
	Renderer.drawCustomSprite("flicky_text_totalmedals", getScreenExtend() - 40 + 127 + 78 + x_offset, 213 + 4 + y_offset, 0, spriteFlags, renderQueue)
	if (starCount / 100 != 0)
	{
		Renderer.drawCustomSprite(stringformat("flicky_smalldigit_%d", starCount / 100), getScreenExtend() - 40 + 229 + x_offset, 213 + y_offset, 0, spriteFlags, renderQueue)	// non-zero hundreds
		Renderer.drawCustomSprite(stringformat("flicky_smalldigit_%d", (starCount / 10) % 10), getScreenExtend() - 40 + 237 + x_offset, 213 + y_offset, 0, spriteFlags, renderQueue)	// tens (even if 0)
	}
	else if ((starCount / 10) % 10 != 0)
		Renderer.drawCustomSprite(stringformat("flicky_smalldigit_%d", (starCount / 10) % 10), getScreenExtend() - 40 + 237 + x_offset, 213 + y_offset, 0, spriteFlags, renderQueue) // non-zero tens
	
	Renderer.drawCustomSprite(stringformat("flicky_smalldigit_%d", starCount % 10), getScreenExtend() - 40 + 245 + x_offset, 213 + y_offset, 0, spriteFlags, renderQueue)	// ones (even if 0)
}



function bool Flicky.TitleCardBar(s16 px, s16 py, s16 renderQueue)
{
	if (objA0.update_address == 0x02d8e2)   // title card bars are currently the old DAGE default and do not have flicky_ prefix at this time
	{
		u64 barKey = "titlecard_bluebar"
		if (global.zone == 0x0c) // special yellow bar for The Doomsday Zone
			barKey = "titlecard_yellowbar"
		else if (global.characters == 2)
			barKey = "titlecard_orangebar"
		else if (global.characters >= 3)
			barKey = "titlecard_redbar_new"
		
		if (unlock_act)
			barKey = stringformat("%s_rtwi", barKey)
	
		Renderer.drawCustomSprite(barKey, px - 0x20, py - 0x40, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue + 0x4000)
		return true
	}
}
function bool Flicky.TitleCardText(s16 px, s16 py, s16 renderQueue)
{
	// Next, code for zone and act names.
	if (objA0.update_address == 0x02d95c && !original_mode)
	{
		// Act number, found by checking which mappings will be used since the actual zone ID order is unwieldy.
		if (objA0.animation.sprite == 0x02 && unlock_act)
		{
			return true	// don't draw anything but prevent the original graphic from showing
		}
		if (objA0.animation.sprite == 0x02 && global.zone_act == 0x1600) // force "Act 2" to show in the LRZ2 boss level
		{
			Renderer.drawCustomSprite("flicky_titlecard_act2", px + 6, py, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue + 0x4000)
			return true
		}
		else if (objA0.animation.sprite == 0x02 && global.zone_act == 0x1700) // force "Act 2" to show in the DEZ2 final boss level
		{
			Renderer.drawCustomSprite("flicky_titlecard_act2", px + 6, py, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue + 0x4000)
			return true
		}
		else if (objA0.animation.sprite == 0x02 && global.zone_act != 0x1601 && global.zone != 0x0a && global.zone != 0x0c) // exclude HPZ, SSZ, and DDZ from drawing act numbers
		{
			Renderer.drawCustomSprite(stringformat("flicky_titlecard_act%d", global.act.apparent + 1), px + 6, py, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue + 0x4000)
			return true
		}
		// Originally the word "zone", now white bars
		else if (objA0.animation.sprite == 0x03)
		{
			Renderer.drawCustomSprite("flicky_titlecard_zone_text", px, py, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue + 0x4000)
			return true
		}
		// Zone name, found by checking which mappings will be used since the actual zone ID order is unwieldy
		else if (objA0.animation.sprite >= 0x04 && objA0.animation.sprite <= 0x11)
		{
			if (unlock_act)
				Renderer.drawCustomSprite(stringformat("flicky_titlecard_unlock%04d", unlock_act), px, py, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue + 0x4000)
			else
				Renderer.drawCustomSprite(stringformat("flicky_titlecard_zone%d", objA0.animation.sprite - 4), px, py, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue + 0x4000)
			return true
		}
		// "Bonus"
		else if (objA0.animation.sprite == 0x12 || objA0.animation.sprite == 0x13)
		{
			Renderer.drawCustomSprite("flicky_titlecard_bonus", px, py, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue + 0x4000)
			return true
		}
		// "Stage"
		else if (objA0.animation.sprite == 0x14)
		{
			Renderer.drawCustomSprite("flicky_titlecard_stage", px, py, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue + 0x4000)
			return true
		}
	}
}


function string Flicky.getCharacterBonusTextIcon(u8 character)
{
	return (character == CHARACTER_SONIC) ? "flicky_hud_bonus_icon_blue" : (character == CHARACTER_TAILS) ? "flicky_hud_bonus_icon_orange" : "flicky_hud_bonus_icon_red"
}

function bool Flicky.LevelResults(s16 px, s16 py, s16 renderQueue)
{
    if (objA0.animation.sprite == 0x0b)
    {
        Renderer.drawCustomSprite(Flicky.getCharacterBonusTextIcon(getMainCharacter()), px+37, py-5, 0, SPRITE_FLAG_PRIO, 0xe000)  // these icons are blank in this theme

        Renderer.drawCustomSprite("flicky_hud_text_total", px, py, 0, SPRITE_FLAG_PRIO, 0xe008)
        return true
    }
    else if (objA0.animation.sprite == 0x0c)
    {
        Renderer.drawCustomSprite(Flicky.getCharacterBonusTextIcon(getMainCharacter()), px+37, py-5, 0, SPRITE_FLAG_PRIO, 0xe000)  // these icons are blank in this theme

        Renderer.drawCustomSprite("flicky_hud_text_bonus", px, py, 0, SPRITE_FLAG_PRIO, 0xe008)
        return true
    }
    else if (objA0.animation.sprite == 0x0d)
    {
        Renderer.drawCustomSprite("flicky_hud_text_ring", px, py, 0, SPRITE_FLAG_PRIO, 0xe008)
        return true
    }
    else if (objA0.animation.sprite == 0x0e)
    {
        Renderer.drawCustomSprite("flicky_hud_text_time", px, py, 0, SPRITE_FLAG_PRIO, 0xe008)
        return true
    }
    else if (objA0.animation.sprite == 0x13)
    {
        Renderer.drawCustomSprite("flicky_sonic_text", px + 1, py, 0, SPRITE_FLAG_PRIO, 0xe008)
        return true
    }
    else if (objA0.animation.sprite == 0x15)
    {
        Renderer.drawCustomSprite("flicky_tails_text", px - 7, py, 0, SPRITE_FLAG_PRIO, 0xe008)
        return true
    }
    else if (objA0.animation.sprite == 0x14)
    {
        Renderer.drawCustomSprite("flicky_miles_text", px + 1, py, 0, SPRITE_FLAG_PRIO, 0xe008)
        return true
    }
    if (objA0.animation.sprite == 0x16)
    {
        Renderer.drawCustomSprite("flicky_knuckles_text", px + 25, py, 0, SPRITE_FLAG_PRIO, 0xe008) // large horizontal shift for Knuckles to center KNUCKLES GOT
        return true
    }
    else if (objA0.animation.sprite == 0x11)
    {
        if (isMainCharacter(CHARACTER_KNUCKLES))
            px += 24

        Renderer.drawCustomSprite("flicky_got_text", px - 1, py, 0, SPRITE_FLAG_PRIO, 0xe008)
        return true
    }
    else if (objA0.animation.sprite == 0x10)
    {
        s16 through_x_offset = (global.zone_act == 0x0a00 || unlock_act) ? -40 : 0		// show "Zone" in SSZ, thus shift "Through" left.
        Renderer.drawCustomSprite("flicky_through_text", px + through_x_offset, py, 0, SPRITE_FLAG_PRIO, 0xe008)
        return true
    }
    else if (objA0.animation.sprite == 0x0f && (global.zone_act == 0x0a00 || unlock_act))	// show "Zone" in SSZ.
    {
        Renderer.drawCustomSprite("flicky_titlecard_zone_text", px - 28, py + 16, 0, SPRITE_FLAG_PRIO, 0xe008)
        return true
    }
    else if (objA0.animation.sprite == 0x0f)
    {
        Renderer.drawCustomSprite(stringformat("flicky_titlecard_act%d", global.zone_act == 0x1600 ? 2 : global.act.apparent + 1), px, py, 0, SPRITE_FLAG_PRIO, 0xe008)
        return true
    }
}

function bool Flicky.SpecialStageResults(s16 px, s16 py, s16 renderQueue)
{
	u8 gameMode = global.game_mode & 0x7f
	if (objA0.update_address == 0x02ea50 || objA0.update_address == 0x02eac8 || objA0.update_address == 0x02ebcc || objA0.update_address == 0x02ec1e && (gameMode == 0x48 || gameMode == 0x0c))
	{
		s16 x_offset = 0
		s16 y_offset = 0

		bool isSKStage = (global.lock_on_state == 0 && global.sk_bluespheres)

        // HUD.drawNumber() and HUD.drawSprite() calls get funneled through a function that appends the theme prefix. Do NOT add it manually!
        // This also means using the standard getCharacterBonusTextIcon() funciton instead of the theme-specific one.
		if (objA0.animation.sprite == 0x17 || objA0.animation.sprite == 0x31 || objA0.animation.sprite == 0x36)
		{
			if (getMainCharacter() == CHARACTER_TAILS && original_mode)
				HUD.drawSprite("hud_bonus_icon_blue", px-60, py-5, renderQueue-1)
			else
				HUD.drawSprite(getCharacterBonusTextIcon(getMainCharacter()), px-60, py-5, renderQueue-1)
				
			HUD.drawSprite(isSKStage ? "hud_text_score_superstage" : "hud_text_score_chaosstage", px - 96, py, renderQueue)
			HUD.drawNumber(isSKStage ? "hud_digit_%d" : "hud_digit_%d_chaosstage", player.score * 10, px + 88, py, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x18 || objA0.animation.sprite == 0x32 || objA0.animation.sprite == 0x37)
		{
			if (getMainCharacter() == CHARACTER_TAILS && original_mode)
				HUD.drawSprite("hud_bonus_icon_blue", px+77, py-5, renderQueue-1)
			else
				HUD.drawSprite(getCharacterBonusTextIcon(getMainCharacter()), px+77, py-5, renderQueue-1)
			HUD.drawSprite(isSKStage ? "hud_text_ring_superstage" : "hud_text_ring_chaosstage", px, py, renderQueue)
			HUD.drawSprite(isSKStage ? "hud_text_bonus_superstage" : "hud_text_bonus_chaosstage", px + 40, py, renderQueue)
			HUD.drawNumber(isSKStage ? "hud_digit_%d" : "hud_digit_%d_chaosstage", results.ring_bonus * 10, px + 184, py, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x19 || objA0.animation.sprite == 0x33 || objA0.animation.sprite == 0x38)
		{
			if (getMainCharacter() == CHARACTER_TAILS && original_mode)
				HUD.drawSprite("hud_bonus_icon_blue", px+52, py-5, renderQueue-1)
			else
				HUD.drawSprite(getCharacterBonusTextIcon(getMainCharacter()), px+52, py-5, renderQueue-1)
			HUD.drawSprite(isSKStage ? "hud_text_perfect_superstage" : "hud_text_perfect_chaosstage", px, py, renderQueue)
			HUD.drawNumber(isSKStage ? "hud_digit_%d" : "hud_digit_%d_chaosstage", results.time_bonus * 10, px + 184, py, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x1a || objA0.animation.sprite == 0x34 || objA0.animation.sprite == 0x39)
		{
			if (getMainCharacter() == CHARACTER_TAILS && original_mode)
				HUD.drawSprite("hud_bonus_icon_blue", px+60, py-5 + 6, renderQueue-1)
			else
				HUD.drawSprite(getCharacterBonusTextIcon(getMainCharacter()), px+60, py-5 + 6, renderQueue-1)
			HUD.drawSprite(isSKStage ? "hud_text_continue_superstage" : "hud_text_continue_chaosstage", px, py + 6, renderQueue)
			return true
		}

		else if (objA0.animation.sprite == 0x12)
		{
			x_offset = -2
			if (getMainCharacter() == CHARACTER_TAILS)
				x_offset = (global.region_code & 0x80) ? -3 : 1
			else if (getMainCharacter() == CHARACTER_KNUCKLES)
				x_offset = 1

			u64 getSuperOrHyper = (isSKStage) ? "hyper" : "super"
			if (getMainCharacter() == CHARACTER_TAILS && !Game.getSetting(SETTING_HYPER_TAILS))
				getSuperOrHyper = "super"
			
			u64 getCharacter = "sonic"
			if (getMainCharacter() == CHARACTER_TAILS)
				getCharacter = "tails"
			else if (getMainCharacter() == CHARACTER_KNUCKLES)
				getCharacter = "knuckles"

			Renderer.drawCustomSprite(stringformat("flicky_%s_text_%s", getSuperOrHyper, getCharacter), px + x_offset, py + y_offset, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x13)
		{
			x_offset = -3
			if (py == 0x0030 || py == 0x00bc)	// SONIC in BE SUPER/HYPER SONIC
				x_offset = 17
			else if (px == 0x0060)	// SONIC in SONIC CAN GO TO
				x_offset = -7
			else if (px == 0x00a8)	// SONIC in NOW SONIC CAN
				x_offset = 1
			
			Renderer.drawCustomSprite("flicky_sonic_text", px + x_offset, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x14)
		{
			x_offset = -3
			if (py == 0x0030 || py == 0x00bc)	// MILES in BE SUPER/HYPER MILES
				x_offset = 17
			else if (px == 0x0060)	// MILES in MILES CAN GO TO
				x_offset = -7
			else if (px == 0x00a8)	// MILES in MILES TAILS CAN
				x_offset = 1
			
			Renderer.drawCustomSprite("flicky_miles_text", px + x_offset, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x15)
		{
			x_offset = -7
			if (py == 0x0030 || py == 0x00bc)	// TAILS in BE SUPER/HYPER TAILS
				x_offset = 13
			else if (px == 0x0064)	// TAILS in TAILS CAN GO TO
				x_offset = -11
			else if (px == 0x00ac)	// TAILS in NOW TAILS CAN
				x_offset = -3
			
			Renderer.drawCustomSprite("flicky_tails_text", px + x_offset, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x16)
		{
			x_offset = -3
			if (py == 0x0030 || py == 0x00bc)	// KNUCKLES in BE SUPER/HYPER KNUCKLES
				x_offset = 17
			else if (px == 0x0048)	// KNUCKLES in KNUCKLES CAN GO TO	// likely needs a new value!
				x_offset = -7
			else if (px == 0x0090)	// KNUCKLES in NOW KNUCKLES CAN		// likely needs a new value!
				x_offset = 1
			
			Renderer.drawCustomSprite("flicky_knuckles_text", px + x_offset, py, 0, SPRITE_FLAG_PRIO, renderQueue)
		//	debugLog(stringformat("%x", px))	// implemented to help with showing the new px check values
			return true
		}

		else if (objA0.animation.sprite == 0x22)
		{
			Renderer.drawCustomSprite(isSKStage ? "flicky_specialstage_text_super" : "flicky_specialstage_text", px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x23)
		{
			x_offset = 4
			if (getMainCharacter() == CHARACTER_TAILS && (global.region_code & 0x80))	// if region code check is true, using TAILS instead of MILES
				x_offset = 8
			else if (getMainCharacter() == CHARACTER_KNUCKLES)	// offset less for GOT ALL
				x_offset = (px == 0x00d4) ? 4 : 5
			Renderer.drawCustomSprite(isSKStage ? "flicky_gota_text_super" : "flicky_gota_text", px + x_offset, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x24)
		{
			Renderer.drawCustomSprite("flicky_chaosemerald_text", px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x25)
		{
			x_offset = 4
			if (getMainCharacter() == CHARACTER_TAILS && (global.region_code & 0x80))	// if region code check is true, using TAILS instead of MILES
				x_offset = 8
			else if (getMainCharacter() == CHARACTER_KNUCKLES)
				x_offset = 4
			Renderer.drawCustomSprite(isSKStage ? "flicky_gotall_text_super" : "flicky_gotall_text", px + x_offset, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x26)
		{
			Renderer.drawCustomSprite(isSKStage ? "flicky_superemeralds_text_super" : "flicky_chaosemeralds_text", px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x27)
		{
			x_offset = -8
			if (getMainCharacter() == CHARACTER_TAILS && (global.region_code & 0x80))	// if region code check is true, using TAILS instead of MILES
				x_offset = -12
			Renderer.drawCustomSprite("flicky_now_text", px + x_offset, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x28)
		{
			x_offset = -16
			if (getMainCharacter() == CHARACTER_TAILS && (global.region_code & 0x80))	// if region code check is true, using TAILS instead of MILES
				x_offset = -20
			Renderer.drawCustomSprite("flicky_be_text", px + x_offset, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x2c)
		{
			x_offset = -8
			if (getMainCharacter() == CHARACTER_TAILS && (global.region_code & 0x80))	// if region code check is true, using TAILS instead of MILES
				x_offset = -12
			Renderer.drawCustomSprite("flicky_now_text_super", px + x_offset, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x2d)
		{
			x_offset = 32
			if (getMainCharacter() == CHARACTER_TAILS && (global.region_code & 0x80))	// if region code check is true, using TAILS instead of MILES
				x_offset = 36
			Renderer.drawCustomSprite("flicky_can_text_super", px + x_offset, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x2e)
		{
			// No x_offset for Sonic
			if (getMainCharacter() == CHARACTER_TAILS && (global.region_code & 0x80))	// if region code check is true, using TAILS instead of MILES
				x_offset = 4
			Renderer.drawCustomSprite("flicky_cangoto_text", px + x_offset, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x2f)
		{
			Renderer.drawCustomSprite("flicky_hiddenpalace_text", px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x30)
		{
			Renderer.drawCustomSprite("flicky_superemerald_text_super", px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x35)
		{
			x_offset = -16
			if (getMainCharacter() == CHARACTER_TAILS && (global.region_code & 0x80))	// if region code check is true, using TAILS instead of MILES
				x_offset = -20
			Renderer.drawCustomSprite("flicky_be_text_super", px + x_offset, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
		else if (objA0.animation.sprite == 0x3a)
		{
			x_offset = 32
			if (getMainCharacter() == CHARACTER_TAILS && (global.region_code & 0x80))	// if region code check is true, using TAILS instead of MILES
				x_offset = 36
			Renderer.drawCustomSprite("flicky_can_text", px + x_offset, py, 0, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
    return false    // update address 0x02ec1e, animation sprite 1 is Super Emerald activation and is not renderhooked
	}
}

function bool Flicky.SpecialStageResultsContinue(s16 px, s16 py, s16 renderQueue)
{
	bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0
	string key = getCharacterContinueIcon(getMainCharacter())
	Renderer.drawCustomSprite(key, px, py + 6, 0x00, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue)
	return true
}

function bool Flicky.GameTimeOver(s16 px, s16 py, s16 renderQueue)
{
	if (objA0.animation.sprite == 0)
	{
		Renderer.drawCustomSprite("flicky_game", px - 72, py - 8, 0, SPRITE_FLAG_PRIO, renderQueue)
		return true
	}
	else if (objA0.animation.sprite == 1 || objA0.animation.sprite == 3)	// first goes with GAME, second with TIME
	{
		Renderer.drawCustomSprite("flicky_over", px + 8, py - 8, 0, SPRITE_FLAG_PRIO, renderQueue)
		return true
	}
	else if (objA0.animation.sprite == 2)
	{
		Renderer.drawCustomSprite("flicky_time", px - 72, py - 8, 0, SPRITE_FLAG_PRIO, renderQueue)
		return true
	}
	else
		return false
}