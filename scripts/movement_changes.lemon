// In rare instances, a speedrunner will want to spindash to an object directly behind him at the start of a level (e.g., HCZ2 Time Stone Trial).
// If the d-pad is held left during character object initialization, we will set the player character (and sidekick Tails) to face left.

// This code doesn't actually change anything. I'll need to be more clever than this.

/*
function void Character.Initialization.shared(u8 character)
{
	base.Character.Initialization.shared(character)
	if (control.pad1.state & CONTROL_LEFT)
	{
		u8[A0 + 0x04] |= render_flag.FLIP_X
	}
}
*/




// Roll leniency functions
function void rollLeniency.CountFrames()
{
	// Player 1
	if (u8[0xffffb040])								// player 1 jumping flag
		air_time = 5
	else if (u8[0xffffb02a] & char.flag.IN_AIR)		// player 1 status bitfield
		air_time++

	// Player 2
	if (u8[0xffffb040 + 0x4a])								// player 2 jumping flag
		air_time_p2 = 5
	else if (u8[0xffffb02a + 0x4a] & char.flag.IN_AIR)			// player 2 status bitfield
		air_time_p2++
}

function bool rollLeniency.CheckMaintainRoll()
{
	bool landedInTime = (air_time < 5)
	if (A0 == 0xffffb04a)
		landedInTime = (air_time_p2 < 5)

	if ((char.flags & char.flag.ROLLING) && !char.jumping && landedInTime)
	{
		char.flags |= char.flag.ROLLING
		char.flags &= ~char.flag.IN_AIR
		char.flags &= ~char.flag.PUSHING
		char.state = char.state.ROLLING

		if (A0 == 0xffffb000)	// main character
			air_time = 0
		else					// sidekick
			air_time_p2 = 0
		return true
	}
	else
	{
		if (A0 == 0xffffb000)	// main character
			air_time = 0
		else					// sidekick
			air_time_p2 = 0
		return false
	}	
}


// If the character rolls from object to terrain, don't uncurl the character.
// This check assumes that a short duration in the air means the above situation happened.
// Function taken from maingame\character\character.lemon
function void Character.LandingOnGroundStandUp()
{
	if (roll_maintain && !original_mode)
		if rollLeniency.CheckMaintainRoll()
			return
	
	if (!original_mode)
	{
		base.Character.LandingOnGroundStandUp()
		return
	}

	// The following code is the base Character.LandingOnGroundStandUp() with standalone checks removed,
	// restoring S3&K quirks in Original Mode.
	D0.u8 = char.hitbox_extends.y		// Setting D0.u8 here is important for some reason
	char.hitbox_extends.x = char.hitbox.default.x
	char.hitbox_extends.y = char.hitbox.default.y

	if (char.flags & char.flag.ROLLING)
	{
		char.flags &= ~char.flag.ROLLING
		char.state = char.state.RUNNING
		D0.u8 -= char.hitbox.default.y

		s16 dy = D0.s8
		if (global.inv_gravity != (char.rotation + 0x40 >= 0x80))
			dy = -dy
		char.position.y.u16 += dy
	}
}




// Allow holding the L button to charge the spin dash.
// Function taken from maingame\character\character.lemon
//# translated(0x011bde) end(0x011cf0)
//# translated(0x011d16) end(0x011da4)
//# translated(0x0151fc) end(0x01530c)
//# translated(0x015332) end(0x0153c0)
function bool Character.UpdateSpindash()
{
#if STANDALONE
	// Ignore this while charging the Super Peel-Out
	if (char.spindash == 0x80)
		return false
#endif

	u8 input_state   = (char.character == CHARACTER_TAILS) ? control.tails.state   : control.player1.state
	u8 input_pressed = (char.character == CHARACTER_TAILS) ? control.tails.pressed : control.player1.pressed

	if (char.spindash == 0)
	{
		bool canStartSpindash = (char.state == char.state.COWERING) && ((input_pressed & CONTROL_ABC) || (Input.buttonDown(BUTTON_L) && L_Spindash && !original_mode && A0 == 0xffffb000) || (Input.buttonDown(BUTTON_L + BUTTON_PAD2) && L_Spindash && !original_mode && A0 == 0xffffb04a))
		if (!canStartSpindash)
		{
			// Nothing to see here
			return false
		}

		// Start spindash
		char.state = char.state.SPINDASH
		playSound(SFX_SPINDASH_CHARGE)
		if (A0 == 0xffffb000)
			L_Spindash_Charge = 0
		if (A0 == 0xffffb04a)
			L_Spindash_Charge_P2 = 0
		if (!original_mode)
			char.velocity.x = 0	// velocity can actually still be set, which interfere's with Euka's code to have sidekick Tails mimic a player spindash

		char.spindash = 1
		char.spindash_charge = 0
		if (char.drown_countdown >= 12)
		{
			// Set state of dust cloud object to 0x02
			u8[A6 + 0x20] = 0x02
		}
	}
	else
	{
		if (input_state & CONTROL_DOWN)
		{
			// Update spindash
			if (char.spindash_charge > 0)
			{
				char.spindash_charge -= char.spindash_charge >> 5
				if (s16(char.spindash_charge) < 0)
					char.spindash_charge = 0
			}

			if (Input.buttonDown(BUTTON_L) && A0 == 0xffffb000 && !original_mode)
			{
				++L_Spindash_Charge	// this increments based on player 1, but the charge timer is shared with sidekick Tails as well
				if (char.spindash_charge == 0 && L_Spindash_Charge == 1)
					++L_Spindash_Charge		// this extra charge for one frame makes the max spindash and peelout charge both occur at the same time
				if (u32[0xffffb04a] && u8[0xffffb04a + 0x3d] == 1 && !tails.control_counter)	// sidekick Tails exists, is charging a spindash, and is AI controlled
				{
					u16[0xfffb04a + 0x18] = 0	// zero out sidekick Tails's velocity so he does not slide toward the player in a spindash state
					u16[0xfffb04a + 0x1c] = 0	// same for ground speed value
					if (u8[0xffffb000 + 0x2a] & char.flag.FACING_LEFT)
						u8[0xffffb04a + 0x2a] |= char.flag.FACING_LEFT		// set left-facing flag to match player character
					else
						u8[0xffffb04a + 0x2a] &= 0xfe						// unset left-facing flag to match player character
				}
			}

			if (Input.buttonDown(BUTTON_L + BUTTON_PAD2) && A0 == 0xffffb04a && !original_mode)
			{
				++L_Spindash_Charge_P2	// this increments based on player 1, but the charge timer is shared with sidekick Tails as well
				if (char.spindash_charge == 0 && L_Spindash_Charge_P2 == 1)
					++L_Spindash_Charge_P2		// this extra charge for one frame makes the max spindash and peelout charge both occur at the same time
			}

			if (!Input.buttonDown(BUTTON_L))
				L_Spindash_Charge = 0
			if (!Input.buttonDown(BUTTON_L + BUTTON_PAD2))
				L_Spindash_Charge_P2 = 0

			if ((input_pressed & CONTROL_ABC) || (L_Spindash_Charge == L_Spindash_ChargeInterval && A0 == 0xffffb000) || (L_Spindash_Charge_P2 == L_Spindash_ChargeInterval && A0 == 0xffffb04a))
			{
				// Charge up
				u16 maxDash = 0x800		// (Input.buttonDown(BUTTON_L) && !original_mode) ? 0x700 : 0x800	// can optionally lower maximum speed when using L; revving should be more effective
				char.state.both = 0x0900		// char.state.SPINDASH, char.state.RUNNING
				char.spindash_charge = min(char.spindash_charge + 0x200, maxDash)
				playSound(SFX_SPINDASH_CHARGE)
				if (L_Spindash_Charge == L_Spindash_ChargeInterval && A0 == 0xffffb000)
					L_Spindash_Charge = 0
				if (L_Spindash_Charge_P2 == L_Spindash_ChargeInterval && A0 == 0xffffb04a)
					L_Spindash_Charge_P2 = 0
			}
		#if STANDALONE
			Input.setControllerRumbleByAddress(A0, 0.0f, 0.2f, 100)
		#endif
		}
		else
		{
			releaseSpindash()
		}

		// Center camera y-offset again
		centerCameraYOffset()
	}

	Character.CheckAgainstMoveBorders()
	Character.UpdateRotationOnGround()
	partialUpdateCharacterOnGround()

	return true
}



// Allow drop dash and peelout via an option separate from AIR's settings.
// Functions taken from maingame\character\character.lemon
//# address-hook(0x010bba) end(0x010c8e)
function void Character.UpdateNormalState.Sonic()
{
	if (updateDebugModeInput(false))
		return

	if (player1.control_override == 0)
	{
		// Set player 1 control state
		control.player1 = control.pad1
	}

	if (char.control_flags & 0x01)
	{
		// Character is not directly controllable (but may be indirectly via an object, like when hanging on a pole or similar)
		char.double_jump_state = 0
	}
	else
	{
		// Call update function depending on flags
		pushA456()
		// Targets:
		//  - 0x010f2c	-> (char.flags & (char.flag.IN_AIR | char.flag.ROLLING)) = 0x00												-> Character.UpdateSonicUprightOnGround()
		//  - 0x010fb6	-> (char.flags & (char.flag.IN_AIR | char.flag.ROLLING)) = char.flag.IN_AIR									-> Character.UpdateSonicUprightInAir()
		//  - 0x010fe0	-> (char.flags & (char.flag.IN_AIR | char.flag.ROLLING)) = char.flag.ROLLING								-> Character.UpdateSonicRollingOnGround()
		//  - 0x011036	-> (char.flags & (char.flag.IN_AIR | char.flag.ROLLING)) = (char.flag.IN_AIR | char.flag.ROLLING)			-> Character.UpdateSonicRollingInAir()
		call tableLookupAddress(0x010c90, char.flags & (char.flag.IN_AIR | char.flag.ROLLING))
		popA456()
	}

#if STANDALONE
	if (sonic_moves && !competition_mode.active && !original_mode)
	{
		if (sonic.dropdash_counter > 0)
		{
			// Check if hit the ground with drop dash charged
			if ((sonic.dropdash_counter == DROPDASH_FULLCHARGE) && (char.flags & char.flag.IN_AIR) == 0)
			{
				if (char.state != char.state.WIN_POSE)		// This check is only needed for drop dash vs. win pose after FBZ 2 boss
				{
					releaseDropDash()
				}
				else
				{
					// Abort drop dash (e.g. when jumping on a spring)
					sonic.dropdash_counter = 0
				}
			}
			else
			{
				u8 expectedState = (sonic.dropdash_counter < DROPDASH_FULLCHARGE) ? char.state.ROLLING : char.state.SONIC_DROPDASH
				if (char.state != expectedState)
				{
					// Abort drop dash (e.g. when jumping on a spring)
					sonic.dropdash_counter = 0
				}
			}
		}
	}

	if (Game.getSetting(SETTING_SUPERFAST_RUNANIM) && !super.active && abs(char.groundspeed) >= 0x0d00)
	{
		sonic.fastrunanim.timer = 30
	}
	else if (sonic.fastrunanim.timer > 0)
	{
		if (abs(char.groundspeed) >= 0x0800)
			--sonic.fastrunanim.timer
		else
			sonic.fastrunanim.timer = 0
	}
#endif

	if (level.vertical_wrap == 0xff00)
	{
		char.position.y.u16 &= level.height.bitmask
	}

	Character.updateBonusEffects()
	Character.UpdateRingsInSuperForm()
	Character.WriteToPositionBackup()
	Character.checkForWaterSurface()

	char.angle_sensor_1 = u8[0xfffff768]
	char.angle_sensor_2 = u8[0xfffff76a]

	if (u8[0xfffff7c8] != 0)
	{
		if (char.state == char.state.RUNNING)
			char.state = char.state.former
	}

	if ((char.control_flags & 0x02) == 0)	// Hanging flag
	{
		UpdateSonicAnimation()
		if (global.inv_gravity)
		{
			char.render_flags ^= render_flag.FLIP_Y
		}
		UpdateSonicSpritePatterns()
	}

	if ((char.control_flags & 0xa0) == 0)
	{
		Character.CheckCollisionsWithDynamicObjects()
	}
}


function void releaseDropDash()
{
	// Release drop dash!

	// Show dust cloud
	if (char.drown_countdown >= 12 && abs(s8(char.rotation)) < 0x1c)
	{
		u8[A6 + 0x20] = 0x02
		u16[A6 + 0x10] = char.position.x.u16
		u16[A6 + 0x14] = char.position.y.u16
		u8[A6 + 0x23] = 0x01
		u8[A6 + 0x2a] = char.flags & char.flag.FACING_LEFT

		// New flag to use drop dash dust animation
		u8[A6 + 0x30] = 1
	}

	s16 dy = s8(14 - char.hitbox_extends.y)
	char.hitbox_extends.x = char.hitbox.x.ROLLING
	char.hitbox_extends.y = char.hitbox.y.ROLLING
	char.position.y.u16 += global.inv_gravity ? dy : -dy

	char.state = char.state.ROLLING
	char.flags |= char.flag.ROLLING
	char.spindash = 0

	sonic.dropdash_counter = 0
	if (control.player1.state & CONTROL_LEFT)
	{
		char.flags |= char.flag.FACING_LEFT
	}
	else if (control.player1.state & CONTROL_RIGHT)
	{
		char.flags &= ~char.flag.FACING_LEFT
	}

	// Camera delay
	if (A0 == 0xffffb000)
	{
		ClearPositionBackup()
		camera.locktime.player1 = 0x0c00
	}
	else
	{
		camera.locktime.player2 = 0x0c00
	}

	s16 baseSpeed = super.active ? 0x0c00 : 0x0800
	s16 maxSpeed  = super.active ? 0x0d00 : 0x0c00
	if ((char.flags & char.flag.FACING_LEFT) == 0)
	{
		if (char.velocity.x > 0)
		{
			char.groundspeed = min(baseSpeed + (char.groundspeed >> 2), maxSpeed)
		}
		else if (char.rotation != 0)
		{
			char.groundspeed = baseSpeed + (char.groundspeed >> 1)
		}
		else
		{
			char.groundspeed = baseSpeed
		}
	}
	else
	{
		baseSpeed = -baseSpeed
		if (char.velocity.x < 0)
		{
			char.groundspeed = max(baseSpeed + (char.groundspeed >> 2), -maxSpeed)
		}
		else if (char.rotation != 0)
		{
			char.groundspeed = baseSpeed + (char.groundspeed >> 1)
		}
		else
		{
			char.groundspeed = baseSpeed
		}
	}

	if (super.active)
	{
		// Using upper byte to signal the difference between Hyper Knuckles hitting the wall and Super/Hyper Sonic's drop dash
		camera.hyper_knux_shake = 0x0114

		Character.ClearEnemiesOnScreen()
		playSound(0x49)
	}

	Audio.playAudio("dropdash_release", AudioContext.CONTEXT_SOUND)
#if STANDALONE
	if (super.active)
		Input.setControllerRumbleByAddress(A0, 0.5f, 1.0f, 200)
	else
		Input.setControllerRumbleByAddress(A0, 0.0f, 1.0f, 150)
#endif
}



// This function also allows the L button to trigger Tails Assist.
function void Character.updateJumpMoves()
{
	u8 input_state     = (char.character == CHARACTER_TAILS) ? control.tails.state   : control.player1.state
	u8 input_pressed   = (char.character == CHARACTER_TAILS) ? control.tails.pressed : control.player1.pressed
	bool isSuperActive = (char.character == CHARACTER_TAILS) ? super.active.tails    : super.active

	if (char.jumping)
	{
		// Limit velocity.y
		s16 max_vy = (char.flags & char.flag.UNDERWATER) ? -0x200 : -0x400
		if (char.velocity.y < max_vy)
		{
			// Limit vertical velocity while not pressing any jump button
			//  -> This is important to support low jumps by just tapping the button briefly
			if ((input_state & CONTROL_ABC) == 0)
			{
				char.velocity.y = max_vy
			}
		}
		else
		{
			if (char.double_jump_state == 0)
			{
				#if STANDALONE
					if (Input.buttonPressed(BUTTON_Y) && !original_mode)
					{
						if (!isSuperActive && char.invuln.countdown == 0)	// Check invulnerability to prevent spamming of super activate + cancel
						{
							if (Character.performSuperTransformation())
								return
						}
					}
				#endif

				// Check if triggered Tails Assist via L button
				if (Input.buttonPressed(BUTTON_L) && A0 == 0xffffb000 && isSecondCharacter(CHARACTER_TAILS) && L_TailsAssist && !original_mode)
					checkStartTailsAssist(input_state)

				// Check if pressed jump again in mid-air
				if (input_pressed & CONTROL_ABC)
				{
				#if STANDALONE
					// Check for other things to do instead of the usual reaction to jump button pressed
					if (onCharacterPressedJumpInMidAir(input_state, input_pressed))
				#endif
					{
						if (char.character == CHARACTER_SONIC)
						{
							SonicPressedJumpInMidAir()
						}
						else if (char.character == CHARACTER_TAILS)
						{
							TailsPressedJumpInMidAir()
						}
						else if (!competition_mode.active)
						{
							KnucklesPressedJumpInMidAir()
						}
						else
						{
							// Knuckles behaves just like Sonic in competition mode
							SonicPressedJumpInMidAir()
						}
					}
				}
			}

		#if STANDALONE
			if (sonic_moves && char.character == CHARACTER_SONIC && !competition_mode.active && !original_mode)
			{
				// Handle drop dash
				//  -> Can only be charged if there is no shield active (only exception: drop dash charge started already, when shield gets active -- this reflects Sonic Mania's behavior)
				//  -> But can be charged if invincible (incl. Super / Hyper Sonic)
				bool chargeDropDash = (control.player1.state & CONTROL_ABC) && ((char.bonus_effect & char.bonus.ELEMENTAL_SHIELDS) == 0 || (char.bonus_effect & char.bonus.INVINCIBLE) || sonic.dropdash_counter > 0) && char.double_jump_state
				if (chargeDropDash)
				{
					if (sonic.dropdash_counter < DROPDASH_FULLCHARGE)
					{
						// Drop dash charging
						++sonic.dropdash_counter
						if (sonic.dropdash_counter == DROPDASH_FULLCHARGE)
						{
							// Fully charged now
							char.state = char.state.SONIC_DROPDASH
							Audio.playAudio("dropdash_charge", AudioContext.CONTEXT_SOUND)
						}
						Input.setControllerRumbleByAddress(A0, 0.0f, 0.25f, 100)
					}
				}
				else if (sonic.dropdash_counter > 0)
				{
					// Abort drop dash
					sonic.dropdash_counter = 0
					char.state = char.state.ROLLING
				}
			}
		#endif
		}
	}
	else
	{
		if (char.spindash == 0)
		{
			char.velocity.y = max(char.velocity.y, -0x0fc0)
		}
	}
}

//# address-hook(0x00ffd4) end(0x010214)
function void Character.OnCollisionWithDynamicObject()
{
	// Example values for objA1.collision_attributes:
	//  - 0x06, 0x0b, 0x17, 0x1a = Different types of enemies
	//  - 0x0f		 = Boss enemy
	//  - 0x18		 = Extended arm of DEZ Chainspike
	//  - 0x23		 = AIZ Bloominator
	//  - 0x46		 = Monitor
	//  - 0x47		 = Dynamic ring
	//  - 0x87		 = Extended arm of SOZ Skorp
	//  - 0x8b, 0x9c = Flames, damaging parts of enemies
	//  - 0x8f		 = Wrecking ball
	//  - 0x98, 0x9b = Projectile
	//  - 0xd8		 = Thrown mushroom, stars over starpost

	D1.u8 = (objA1.collision_attributes & collision_attributes.flags)
	if (D1.u8 == 0)
	{
		// Collision is an enemy, i.e. is harmful, but can be attacked
		bool attacking = false
		if (char.bonus_effect & char.bonus.INVINCIBLE)
		{
			attacking = true
		}
		else if (char.state == char.state.ROLLING || char.state == char.state.SPINDASH)
		{
			attacking = true
		}
	#if STANDALONE
		else if (sonic_moves && char.character == CHARACTER_SONIC && char.state == char.state.SONIC_DROPDASH && !original_mode)
		{
			attacking = true
		}
	#endif

		if (!attacking)
		{
			bool isThreat = false
			if (char.character == CHARACTER_KNUCKLES)
			{
				isThreat = (char.double_jump_state != 1 && char.double_jump_state != 3)
			}
			else if (char.character == CHARACTER_SONIC || char.double_jump_state == 0 || (char.flags & char.flag.UNDERWATER))
			{
				isThreat = true
			}
			else
			{
				s16 dx = char.position.x.u16 - objA1.position.x.u16
				s16 dy = char.position.y.u16 - objA1.position.y.u16
				D0.u8 = lookupAngleByVector(dx, dy) - 0x20
				isThreat = (D0.u8 >= 0x40)
			}

			if (isThreat)
			{
				Character.OnThreatCollision()
				return
			}
		}

		if (u8[A1 + 0x29] != 0)
		{
			char.velocity.x = -char.velocity.x
			char.velocity.y = -char.velocity.y
			char.groundspeed = -char.groundspeed
			u8[A1 + 0x1c] = A0.u8
			u8[A1 + 0x25] = u8[A1 + 0x28]
			u8[A1 + 0x28] = 0
			--u8[A1 + 0x29]
			if (u8[A1 + 0x29] == 0)
			{
				u8[A1 + 0x2a] |= 0x80
			}

			if (char.character == CHARACTER_KNUCKLES)
			{
				if (char.double_jump_state == 1)
				{
					char.double_jump_state = 2
					char.state = char.state.KNUX_FALLING

					if (char.velocity.x >= 0)
						char.flags |= char.flag.FACING_LEFT
					else
						char.flags &= ~char.flag.FACING_LEFT

					char.hitbox_extends.x = char.hitbox.default.x
					char.hitbox_extends.y = char.hitbox.default.y
				}
			}
		}
		else
		{
			if (u8[A1 + 0x2a] & 0x04)
			{
				A2 = 0xffff0000 + u16[A1 + 0x3c]
				u8[A2] &= ~(1 << u8[A1 + 0x3b])
			}

			u8[A1 + 0x2a] |= 0x80

			// Grant bonus points
			Enemy.addScore(A1, 0x010216)

			objA1.update_address = 0x01e5e0
			u8[A1 + 0x05] = 0
			if (char.velocity.y < 0)
			{
				char.velocity.y += 0x100
			}
			else if (char.position.y.u16 >= objA1.position.y.u16)
			{
				char.velocity.y -= 0x100
			}
			else
			{
				char.velocity.y = -char.velocity.y
			}
		}
	}
	else if (D1.u8 == collision.flag.ITEM)
	{
		D0.u8 = (objA1.collision_attributes & collision_attributes.size)
		if (D0.u8 != collision.size.16x16)
		{
			// Collect ring, but only after 30 invulnerability frames
			//  -> Remember that the "char.invuln.countdown" timer starts at 120
			u8 timer = competition_mode.active ? char.invuln.countdown : u8[0xffffb000 + 0x34]
			if (timer < 90)
			{
				u8[A1 + 0x05] = 0x04
			}
		}
		else
		{
			// This part seems to be for monitors specifically
			s16 vy = (global.inv_gravity) ? -char.velocity.y : char.velocity.y
		#if STANDALONE
			// Calculate if the player is moving up, specifically relative to the monitor
			if (!original_mode)
				vy = char.velocity.y - objA1.velocity.y
		#endif
			bool movingUp = (objA1.render_flags & render_flag.FLIP_Y) ? (vy > 0) : (vy < 0)
		#if STANDALONE
			if (!original_mode)
			{
				movingUp = (vy < 0)		// Velocity is normalised for inverted gravity anyway, so no need for fancy conditional checks

				// If player and monitor are at different orientations, check if player is moving down instead of up
				if ((objA1.render_flags & render_flag.FLIP_Y) != (char.render_flags & render_flag.FLIP_Y))
				{
					movingUp = !movingUp

					if (char.flags & char.flag.IN_AIR)
						objA1.flags2a &= ~object.flag.P1_PUSHING
				}

				movingUp = (movingUp && (abs(char.position.x.u16 - objA1.position.x.u16) < 0x12 || char.state == char.state.ROLLING))		// only bounce at a certain distance, otherwise push the player away when falling, #contributed by GFX32
			}
		#endif
			if (movingUp)
			{
				if (!original_mode)
				{
					if ((objA1.flags2a & object.flag.P1_PUSHING) && (char.flags & char.flag.IN_AIR) && !original_mode)
					{
						// In S3AIR, do not allow S&K's monitor opening from the side
						//  -> This is done to be more consistent with other Sonic games, incl. Sonic 1, 2, CD, Mania and even Sonic 3 alone
						//  -> The first check above tells us if the character is on a side of the monitor
						//  -> The second one makes sure that you can always ground-based roll into a monitor (see e.g. first invincibility in MHZ 1, when spindashing into it from the right)
						return
					}
					else if (Game.getSetting(SETTING_MONITOR_BEHAVIOR) == 0 || original_mode || time_attack)
					{
						// All you really need for Sonic & Knuckles monitor Behavior. everything else relevant is handled elsewhere
						char.velocity.y = -char.velocity.y
					}
					else
					{
						// Improved code to prevent crushing and allow bouncing on ground, #contributed by GFX32

						// If the player is below the monitor, it should bounce.
						bool isBelow = (char.position.y.u16 > (objA1.position.y.u16 + objA1.hitbox_extends.y))

						if (objA1.render_flags & render_flag.FLIP_Y)
							isBelow = (char.position.y.u16 < (objA1.position.y.u16 - objA1.hitbox_extends.y))

						// Not when spindashing!
						if (char.state == char.state.SPINDASH)
							isBelow = false

						if (isBelow)
						{
							// Hit monitor from below, make it fall
							u8[A1 + 0x3c] = 1

							char.velocity.y = -char.velocity.y
							objA1.velocity.y = -0x180

							// Calculate how far the monitor is inside the player, then separate them; this attempts to prevent crushing collision on subsequent frames.
							s16 dy = (objA1.position.y.u16 + objA1.hitbox_extends.y) - (char.position.y.u16 - char.hitbox_extends.y)

							if (objA1.render_flags & render_flag.FLIP_Y)
								dy = (objA1.position.y.u16 - objA1.hitbox_extends.y) - (char.position.y.u16 + char.hitbox_extends.y)

							// Only push the player when in midair
							if (char.flags & char.flag.IN_AIR)
							{
								dy /= 2
								char.position.y.u16 += dy
							}
							objA1.position.y.u16 -= dy

							if (u8[A1 + 0x3c] == 0)
								u8[A1 + 0x3c] = 4

							return
						}
					}
				}
				else
				{
					if (objA1.flags2a & char.flag.IN_AIR)
					{
						// This block is a bit broken due to the above check, and falling monitors can crush the player, and is this really what we want?

						if ((objA1.render_flags & render_flag.FLIP_Y) == 0)
						{
							if (char.position.y.u16 - 0x10 < objA1.position.y.u16)
								return
						}
						else
						{
							if (char.position.y.u16 + 0x10 >= objA1.position.y.u16)
								return
						}

						char.velocity.y = -char.velocity.y
						objA1.velocity.y = -0x180
						if (u8[A1 + 0x3c] == 0)
							u8[A1 + 0x3c] = 4

						return
					}
				}
			}

			if (A0 != 0xffffb000 && competition_mode.active == 0)
			{
				// Sorry player 2, you can't open monitors in normal game
				return
			}

			bool canOpenMonitor = false
			if (char.state == char.state.ROLLING)
			{
				canOpenMonitor = true
			}
		#if STANDALONE
			else if (sonic_moves && char.character == CHARACTER_SONIC && char.state == char.state.SONIC_DROPDASH && !original_mode)
			{
				canOpenMonitor = true
			}
			else if (char.state == char.state.SPINDASH && !original_mode)
			{
				canOpenMonitor = true
			}
			else if (objA1.velocity.y < 0 && !original_mode)
			{
				// Make monitors break over the player's head at different orientations. #contributed by Dynamic Lemons
				if ((global.inv_gravity != (objA1.render_flags & render_flag.FLIP_Y) != 0))
					canOpenMonitor = true
			}
		#endif
			else if (char.character == CHARACTER_KNUCKLES)
			{
				// Check if Knuckles glides into the monitor
				canOpenMonitor = (char.double_jump_state == 1 || char.double_jump_state == 3)
			}

			if (canOpenMonitor)
			{
			#if STANDALONE
				if (!movingUp || original_mode)
			#endif
				{
					// Bounce off
					char.velocity.y = -char.velocity.y
				}
				objA1.base_state = 0x04		// Set monitor state to broken
				objA1.monitor.character_address = A0.u16		// RAM address of character
			}
		}
	}
	else if (D1.u8 == collision.flag.THREAT)
	{
		// Harmful object
		Character.OnThreatCollision()
	}
	else  // D1.u8 == collision.flag.SPECIAL
	{
		// Other interactable object
		fn0103ba()
	}
}

function void Character.updateUprightOnGround()
{
	if (char.character == CHARACTER_TAILS)
		Tails.CheckDropSonic()

	if (Character.UpdateSpindash())
		return

#if STANDALONE
	if (char.character == CHARACTER_SONIC && sonic_moves && !original_mode)
	{
		if (Character.updateSuperPeelout())
			return
	}
#endif

	if (Character.CheckStartJump())
		return

	Character.UpdateUprightSlopeEffect()
	Character.updateUprightOnGroundInner()
	Character.CheckForStartRolling()

	Character.sharedUpdateOnGround()
}

// Functions taken from objects\07_mhz\mhz_stickyvine.lemon
//# address-hook(0x03eb26) end(0x03eb4c)
function void fn03eb26()
{
	A1 = u32[A0 + 0x2e]
	if (u8[A1 + 0x3d] != 0)		// Check spindash charge of the character
	{
		u8[A0 + 0x3d] = 0x01
		u8[A0 + 0x3e] = 0x10
	}

#if STANDALONE
	// Also react to drop dash
	if (u8[A1 + 0x38] == CHARACTER_SONIC && sonic_moves && u8[A1 + 0x25] > 0)
	{
		u8[A0 + 0x3d] = 0x02
		u8[A0 + 0x3e] = 0x10
	}
#endif

	D0 = u32[A1 + 0x10]
	D1 = u32[A1 + 0x14]

	fn03ec2a()
	fn03ec66()
	fn03ebf8()
}

//# address-hook(0x03ec66) end(0x03ed08)
function void fn03ec66()
{
	D1 = (D1 << 16) + (D1 >> 16)
	D2 = (D2 << 16) + (D2 >> 16)
	D3.u16 = abs(D1.s16)
	D4.u16 = abs(D2.s16)
	D3.u16 = (D3.u16 + D4.u16) * 2
	LookupAngleByVector()
	LookupSinCos()
	D1.s32 = s32(D1.s16) * D3.s16
	D1.s32 <<= 2
	D0.s32 = s32(D0.s16) * D3.s16
	D0.s32 <<= 1

	u32[A1 + 0x10] -= D1
	if (u8[A1 + 0x2a] & char.flag.IN_AIR)
	{
		u32[A1 + 0x14] -= D0
		if (objA1.velocity.y >= 0)
		{
			objA1.velocity.x >>= 1
		}
	}
	else
	{
		D1.s32 >>= 8
		D1.s16 = abs(D1.s16)
		D0.u16 = abs(s16[A1 + 0x1c])
		if (D0.u16 >= 0x0200)
		{
			D0.u16 -= 0x10
			if (D0.u16 < D1.u16)
			{
				s16[A1 + 0x1c] >>= 1
			}
		}
	}

	// Release by spindash (or drop dash):
	//  - u8[A0 + 0x3d] gets set to 1 when starting a spindash
	//  - u8[A1 + 0x3d] is "char.spindash" and gets 0 on spindash release
	bool release = false
#if STANDALONE
	if (u8[A0 + 0x3d] == 1)
	{
		release = (u8[A1 + 0x3d] == 0)
	}
	else if (u8[A0 + 0x3d] == 2)
	{
		release = (u8[A1 + 0x38] == CHARACTER_SONIC && sonic_moves && u8[A1 + 0x25] == 0)
	}
#else
	release = (u8[A0 + 0x3d] != 0 && u8[A1 + 0x3d] == 0)
#endif

	if (release)
	{
		--u8[A0 + 0x3e]
		if (u8[A0 + 0x3e] == 0)
		{
			u32[A0 + 0x30] = u32[A1 + 0x10]
			objA0.countdown_callback = u32[A1 + 0x14]
			objA0.velocity.y = -0x600
			u8[A0 + 0x3d] = 0
			u8[A0 + 0x3e] = 0
			objA0.update_address = 0x03eb50
		}
	}

	u8[A1 + 0x2a] &= ~char.flag.PUSHING
}

// Function taken from objects\basics\monitor.lemon
//# address-hook(0x01d696) end(0x01d6be)
function void MonitorIntact.CheckBlocking()
{
	u8 bit = (1 << D6.u8)
	if (objA0.flags2a & bit)
	{
		fn01d6dc()
	}
	else
	{
		// Note that "Character.OnCollisionWithDynamicObject" does the same checks again

		bool canOpenMonitor = false
		if (objA1.state == char.state.ROLLING)
		{
			canOpenMonitor = true
		}
	#if STANDALONE
		else if (sonic_moves && u8[A1 + 0x38] == CHARACTER_SONIC && objA1.state == char.state.SONIC_DROPDASH && !original_mode)
		{
			canOpenMonitor = true
		}
		else if (objA1.state == char.state.SPINDASH&& !original_mode)
		{
			canOpenMonitor = true
		}
		else if (objA0.velocity.y > 0 && !original_mode)
		{
			canOpenMonitor = true
		}
	#endif
		else if (u8[A1 + 0x38] == CHARACTER_KNUCKLES)
		{
			// Check if Knuckles glides into the monitor
			canOpenMonitor = (u8[A1 + 0x2f] == 1 || u8[A1 + 0x2f] == 3)
		}

		if (!canOpenMonitor)
		{
			// Block character movement
			fn01df90()
		}
	}
}


// Makes Tails' tails invisible when using the spiral cylinder animation
// Functions taken from maingame\character\tails_tails.lemon
//# address-hook(0x0160d2)
function void TailsTails.Update()
{
	// Update various properties from Tails main object
	A2 = 0xffff0000 + u16[A0 + 0x30]
	objA0.position.x.u16 = u16[A2 + 0x10]
	objA0.position.y.u16 = u16[A2 + 0x14]
	u8[A0 + 0x26] = u8[A2 + 0x26]			// Rotation
	objA0.flags2a = u8[A2 + 0x2a]			// Flags
	objA0.sprite_priority = u16[A2 + 0x08]
	objA0.sprite_attributes = (objA0.sprite_attributes & ~sprite_attribute.PRIORITY) | (u16[A2 + 0x0a] & sprite_attribute.PRIORITY)

	D0 = u8[A2 + 0x20]
	if ((u8[A2 + 0x2a] & char.flag.PUSHING) && u8[0xfffff7c9] == 0)
	{
		if (u8[A2 + 0x22] >= 0xa9 && u8[A2 + 0x22] <= 0xac)		// Range of Tails' pushing animation frames
		{
			D0 = 4	// Set appropriate tail animation manually, because char.state isn't actually set for character pushing animation
		}
	}
	if (u8[A2 + 0x22] >= 0x69 && u8[A2 + 0x22] <= 0x77)		// Range of Tails' spiral cylinder frames
	{
		D0 = 0	// Hide tails
	}
	if (u8[A0 + 0x34] != D0.u8)
	{
		u8[A0 + 0x34] = D0.u8
		objA0.state = u8[0x016164 + D0.s16]
	}

	A1 = 0x016196
	UpdateTailsAnimation_inner()
	if (global.inv_gravity && objA0.state != 0x03)
	{
		objA0.render_flags ^= render_flag.FLIP_Y
	}

	TailsTails.UpdateSpritePatterns()
	DrawObject()
}